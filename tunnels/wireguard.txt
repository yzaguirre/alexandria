https://www.wireguard.com
https://news.ycombinator.com/item?id=11994265
https://www.digitalocean.com/community/tutorials/how-to-set-up-wireguard-on-ubuntu-20-04

Server installation
Included in linux kernel since 5.6
	apt install wireguard linux-image-amd64
Enable ipv4 forwarding
	vim /etc/sysctl.d/99-sysctl.conf
net.ipv4.ip_forward=1

Client installation
	apt install wireguard-tools

https://lwn.net/SubscriberLink/748582/75c743d0eb3aae0f/
https://news.ycombinator.com/item?id=16541409

https://news.ycombinator.com/item?id=17846387
https://arstechnica.com/gadgets/2018/08/wireguard-vpn-review-fast-connections-amaze-but-windows-support-needs-to-happen/
https://www.stavros.io/posts/how-to-configure-wireguard/

A Mechanised Cryptographic Proof of the WireGuard Virtual Private Network Protocol
https://hal.inria.fr/hal-02100345
https://news.ycombinator.com/item?id=19896760

https://github.com/adrianmihalko/wg_config
	git clone https://github.com/adrianmihalko/wg_config
add a user
	./user.sh -a alice
delete a user
	./user.sh -d alice
view a user
	./user.sh -v alice
clear all
	./user.sh -c

Default UDP port 51820

Install
	sudo add-apt-repository ppa:wireguard/wireguard
	apt install wireguard-dkms wireguard-tools
Create a private key
	(umask 077 && printf "[Interface]\nPrivateKey = " | sudo tee /etc/wireguard/wg0.conf > /dev/null)
	wg genkey | sudo tee -a /etc/wireguard/wg0.conf | wg pubkey | sudo tee /etc/wireguard/publickey
We will need to exchange the key in this file (/etc/wireguard/publickey) with the second server as we define our configuration.

Create key pair a different way, on client
	sudo bash -c "umask 077; wg genkey > /etc/wireguard/client.key"
	sudo bash -c "wg pubkey < /etc/wireguard/client.key > /etc/wireguard/client.pub"
Create key pair on server
	umask 077; wg genkey > /etc/wireguard/server.key
	wg pubkey < /etc/wireguard/server.key > /etc/wireguard/server.pub
	cp /etc/wireguard/server.key /etc/wireguard/wg0.conf
Open configuration file on server
	sudo vim /etc/wireguard/wg0.conf
Configuring the Interface Section
We need to define the VPN IP address this node will use and the port that it will listen on for connections from peers
[Interface]
Address = 172.16.0.1/24
PrivateKey = generated_private_key
ListenPort = 51820
SaveConfig = true
# Firewall rules
PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

[Peer]
# Client #1 details
PublicKey = (client's public key goes here)
# Traffic to route to this client
AllowedIPs = 172.16.0.2/32

On client
	vim /etc/wireguard/wg0.conf
[Interface]
Address = 172.16.0.2/24
PrivateKey = (client's private key goes here)
# Set to your desired DNS server
DNS = 8.8.8.8

[Peer]
PublicKey = (server's public key goes here)
# Endpoint (server) can be a domain name or IP address
Endpoint = (server's IP address goes here):51820
# Traffic to route to server
AllowedIPs = 0.0.0.0/0, ::/0
# Keepalive (use if you're behind NAT)
PersistentKeepalive = 25

Start the service on the server
	sudo systemctl enable --now wg-quick@wg0.service
Start the client
	sudo wg-quick up wg0
Stop the client
	sudo wg-quick down wg0

Digital Ocean tutorial, for end to end
https://www.digitalocean.com/community/tutorials/how-to-create-a-point-to-point-vpn-with-wireguard-on-ubuntu-16-04
We will use the 10.0.0.0/24 subnet as the address space for our VPN.
For each computer, you will need to pick a unique address within this range (10.0.0.1 to 10.0.0.254)
and specify the address and subnet using CIDR notation.
Address = 10.0.0.1/24

wg0.conf on second server
	vim /etc/wireguard/wg0.conf
[Interface]
PrivateKey = generated_private_key
ListenPort = 5555
SaveConfig = true
Address = 10.0.0.2/24

Add a peer to the server.
Since we know the specific IP address that the first server is using,
we can input that directly, ending with /32 to indicate a range that contains single IP value:
/etc/wireguard/wg0.conf on second server
[Peer]
PublicKey = public_key_of_first_server
AllowedIPs = 10.0.0.1/32
Endpoint = public_IP_of_first_server:5555

To route to the server LAN:
AllowedIPs = 192.168.2.1/24, 192.168.1.1/24

To route all traffic to server:
AllowedIPs = 0.0.0.0/0, ::/0

Add the following to the server config:
PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

Opening the Firewall and Starting the VPN
	sudo ufw allow 5555
Now, start the wg-quick service using the wg0 interface file we defined:
	sudo systemctl enable --now wg-quick@wg0.service
This will start of the wg0 network interface on the machine. We can confirm this by typing:
	ip addr show wg0
We can use the wg tool to view information about the active configuration of the VPN:
	sudo wg

To complete the connection, we now need to add the second server's peering information to the first server using the wg command.
On the first server:
	sudo wg set wg0 peer public_key_of_second_server endpoint public_IP_of_second_server:5555 allowed-ips 10.0.0.2/32
You can confirm that the information is now in the active configuration by typing sudo wg again on the first server:
	sudo wg
Ping the second server
	ping -c 3 10.0.0.2
If everything is working correctly, you can save the configuration on the first server back to the /etc/wireguard/wg0.conf file by restarting the service:
	sudo systemctl restart wg-quick@wg0
If you want to start the tunnel at boot, you can enable the service on each machine by typing:
	sudo systemctl enable wg-quick@wg0

Mobile Client
Share a configuration file (see ~/qrcode.txt)
	qrencode -t ansiutf8 < tunner.conf

https://genneko.github.io/playing-with-bsd/networking/freebsd-wireguard-jail/
