https://knowtechie.com/this-beautiful-website-illustrates-the-full-potential-of-a-tls-connection/
https://tls.ulfheim.net/
https://tls13.ulfheim.net/

https://chris408.com/post/certificate-transparency-logs-and-how-they-are-a-gold-mine-to-bug-hunters/
https://github.com/chris408/ct-exposer

https://letsencrypt.org/
https://alwaysonssl.com/
https://api-crypt.com/

https://blog.discourse.org/2018/04/https-by-default/
"So, regardless of where you're hosted, now would be a good time to start making sure all your web properties are being served over HTTPS."

https://en.internetwache.org/certificate-transparency-as-a-source-for-subdomains-14-12-2017/

https://www.ct-observatory.org/
https://www.certificate-transparency.org/
https://crt.sh/?q=internetwache.org
https://hstspreload.org
https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices

Implementations
openssl
s2n
axTLS
libressl
rustls
boringssl
MatrixSSL
WolfSSL
mbedTLS/PolarSSL

https://badssl.com/

https://www.namecheap.com/resources/what-is-an-ssl-certificate.aspx
Print cyphers
	openssl ciphers -v|less
Generate a RSA key
Encrypted with AES128, 2048 keysize
	openssl genrsa -aes128 -out fd.key.key.secure 2048
Unencrypt the key
	openssl rsa -in fd.key.secure -out fd.key
Not encrypted, 2048 keysize
	openssl genrsa -out fd.key 2048

Inspect the key content
	openssl rsa -text -in fd.key

Export the public key
	openssl rsa -in fd.key -pubout fd.pub

DSA generation
Step 1- Create DSA parameters
Step 2- Create the DSA key
	openssl dsaparam -genkey 2048 | openssl dsa -out dsa.key -aes128
It's password protected

ECDSA
https://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations
Create a 256-bit ECDSA key using the secp256r1
	openssl ecparam -genkey -name secp256r1 | openssl ec -out ec.key -aes256
It's password protected
List curves
	openssl ecparam -list_curves

Create a Certificate Signing Request
This is a formal request asking a CA to sign a certificate, and it contains the public key of the entity requesting the certificate and some information about the entity.
If you want a field to be empty, you must enter a single dot
	openssl req -new -key fd.key -out fd.csr
Specifies the message digest to sign the request with -sha256
	openssl req -new -sha256 -key fd.key -out fd.csr

Inspect the csr
	openssl req -text -in fd.csr -noout

Create csr from existing certificate
	openssl x509 -x509toreq -in fd.crt -out fd.csr -signkey fd.key

Use a config file:
[req]
prompt = no
distinguished_name = dn
req_extensions = ext
# input_password = PASSPHRASE

[dn]
CN = www.feistyduck.com
CN =  www.feistyduck.com
emailAddress = webmaster@feistyduck.com
O = Feisty Duck Ltd
OU = Production
ST = Guatemala
L = Ciudad de Guatemala
C = GT

[ext]
subjectAltName = DNS:www.feistyduck.com,DNS:feistyduck.com

	openssl req -new -sha256 -config fd.cnf -key fd.key -out fd.csr

Self signed certificate
	openssl x509 -req -days 365 -in fd.csr -signkey fd.key -out fd.crt
Self signed without CSR
	openssl req -new -x509 -days 365 -key fd.key -out fd.crt

Verify the certificate
	openssl x509 -noout -text -in www.blackmoreops.com.crt 
