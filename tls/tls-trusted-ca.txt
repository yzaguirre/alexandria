CT tools
https://scotthelme.co.uk/certificate-transparency-an-introduction/
https://scotthelme.co.uk/finding-phishing-sites-with-ct/

Distrust of Symantec TLS Certificates
https://news.ycombinator.com/item?id=17918748

Inspect the key content
	openssl rsa -text -in certificate.key
Inspect a certificate
	openssl req -text -in certificate.csr
Inspect a certificate (signed from the CSR by a CA)
	openssl X.509 -text -in certificate.crt
	

SSL Generator
https://mozilla.github.io/server-side-tls/ssl-config-generator/
https://sethvargo.com/getting-an-a-plus-on-qualys-ssl-labs-tester/
https://https.cio.gov/
https://news.ycombinator.com/item?id=9220001
https://github.com/zakjan/cert-chain-resolver
https://news.ycombinator.com/item?id=8907148
https://www.ssllabs.com/ssltest/
https://www.digitalocean.com/community/tutorials/how-to-install-an-ssl-certificate-from-a-commercial-certificate-authority
Here you create 4 files
	1 .secure (which is a private key with password)
	1 .key (which is a private key without password)
	1 .csr (certificate sign request)
	1 .crt (public certificate signed by some CA)
Other tutorials that touch tls topic
gnulinuxos/ec2/ec2-vitals.txt gnulinuxos/scripts/change-all-ssl.sh gnulinuxos/scripts/list.sh comm/irc/bitlbee.txt comm/irc/ircd-hybrid.txt comm/nextcloud.txt tunnels/tls.txt tunnels/openvpn.txt tunnels/openssl.txt apache/apache-tls.txt db/mariadb/mariadb-tls.txt

page 170 ubuntu server guide
	apt install openssl
1. First, create the directories to hold the CA certificate and related files:
	mkdir -p /etc/ssl/{private,newcerts,certs,requests,CA}
	cd /etc/ssl
2. Generating your keys. Generate a 2048-bit RSA private key and save it to a file:
In higher-security environments, encrypting the key by adding the -des3 argument
after the genrsa argument on the openssl command line is a good idea:
	openssl genrsa -sha256 -out site1.key.secure 2048
	chmod 600 site1.key

You are asked for a passphrase, which is needed every time you start Apache.
The minimum length when specifying -des3 is four characters.

3. Now create the insecure key, the one without a passphrase:
	openssl rsa -in site1.key.secure -out site1.key
The insecure key is now named server.key, and you can use this file to generate the CSR without
passphrase.

4. To create the CSR:
	openssl req -new -sha256 -key site1.key -out site1.csr
It will prompt you enter the passphrase. If you enter the correct passphrase, it will prompt you to enter
Company Name, Site Name, Email Id, etc. Once you enter all these details, your CSR will be created
and it will be stored in the server.csr file.

Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:Washington
Locality Name (eg, city) []:Bellingham
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Example Company, LTD.
Organizational Unit Name (eg, section) []:Network Operations
Common Name (eg, YOUR name) []:secure.example.org
Email Address []:dom@example.org
Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

The Common Name should match the name that clients will use to access your server. Be
sure to get the other details right if you plan to have the CSR signed by a third-party CA

When using a third-party CA, submit the CSR to it and then place the certificate it 
provides you into /etc/ssl/certs/site1_com.crt (or a different file, as desired).

You can now submit this CSR file to a CA for processing. The CA will use this CSR file and issue the
certificate. On the other hand, you can create self-signed certificate using this CSR.
    Root CA Certificate - AddTrustExternalCARoot.crt
    Intermediate CA Certificate - COMODORSAAddTrustCA.crt
    Intermediate CA Certificate - COMODORSADomainValidationSecureServerCA.crt
    Your PositiveSSL Certificate - site1_com.crt
5. First make a bundle
https://support.comodo.com/index.php?/Default/Knowledgebase/Article/View/643/17/
ej:	cat EssentialSSLCA_2.crt ComodoUTNSGCCA.crt UTNAddTrustSGCCA.crt AddTrustExternalCARoot.crt > yourDomain.ca-bundle
	cat COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > site1_com.ca-bundle

6. Installing the Certificate
You can install the key file server.key and certificate file server.crt, or the certificate file issued
by your CA, by running following commands at a terminal prompt:
	mv server.crt /etc/ssl/certs
	mv server.key /etc/ssl/private
Now simply configure any applications, with the ability to use public-key cryptography, to use the
certificate and key files. For example, Apache can provide HTTPS, Dovecot can provide IMAPS and
POP3S, etc.

7. Extra
See tunnels/openssl.txt

Summary
	mkdir -p /etc/ssl/{private,certs,requests,CA}
	cd /etc/ssl
	openssl genrsa -sha256 -out private/site1.key.secure 2048
	chmod 600 private/site1.key.secure
	openssl rsa -in private/site1.key.secure -out site1.key
	openssl req -new -sha256 -key site1.key -out requests/site1.csr
Once recieved the crt and other files from CA, do:
	cat COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt > site1.ca-bundle
	mv site1.crt site1.ca-bundle certs/
You may want to securely erase the .csr and .key (the one without password, DONT'T DELETE THE PRIVATE KEY .SECURE !!) files
	shred -n 10 -z requests/site1.csr site1.key
	rm requests/site1.csr site1.key
