https://www.laravel.com/
https://laravel.com/docs/5.7/
https://learninglaravel.net/cheatsheet/
Debugging with php methods
var_dump($var)
dd($var)

Dependencies
	apt install php7.1 php7.1-xml php7.1-mbstring php7.1-zip
7.2	apt install php7.2-xml php7.2-mbstring php7.2-zip
7.3	apt install php7.3-xml php7.3-mbstring php7.3-zip
	npm install -g cross-env

Install via composer
	composer global require "laravel/installer"
Make env variables in ~/.profile
PATH=$PATH:$HOME/.composer/vendor/bin
Otherwise, update dependencies
	composer global update

Apache2 install
https://stackoverflow.com/questions/35501041/how-to-configure-apache-web-server-to-deploy-laravel-5#35501156

Create a fresh Larvel installation
	laravel new blog
Make project based on laravel version 5.5.*
https://stackoverflow.com/questions/42570359/artisan-clear-compiled-return-error-code-255#42570566
	composer create-project --prefer-dist laravel/laravel blog "5.5.*"
Change webroot to blog/public
Configuration files in blog/config
Change directory permissions
	sudo chown www-data:www-data -R blog/

Check laravel version
	php artisan -V
Open a shell
	php artisan tinker
App\Task::all();
App\Task::where('id',1)->get();
App\Task::where('id','>',1)->get();
App\Task::pluck('body');
App\Task::pluck('body')->first();

Change Application Key in the .env file
	php artisan key:generate

Start built-in server
	php artisan serve

Help
	php artisan help make:migration

Define routes in web file routes/web.php
https://laravel.com/docs/5.7/routing
Route::get('/', 'MainController@index');
Route::resource('posts', 'PostsController');

Load views in resources/views

Reference variables in routes
return view('welcome', [
  'name' => 'David'
]);
return view('welcome')->with('name', 'David');
$name = 'David';
 return view('welcome', compact('name'));

Validate a request
https://laravel.com/docs/5.5/validation#available-validation-rules
	$this->validate(request(), [
		'title' => 'required',
		'body' => 'required'
	]);
New since laravel 5.5
	request()->validate([
		'title' => 'required|min:3',
		'body' => [
			'required',
			'max:100'
		]
	]);
Returns validated data, and nothing outside the validation schema
	$validatedData = request()->validate([
		'title' => 'required',
		'body' => 'required'
	]);
When validation fails, function flow stops there
Test
	dd($validatedData);
	dd(request()->all());
	\App\Client::forceCreate($validatedData);
Create custom rules
	php artisan make:rule MustBeFiveCharacters
	php artisan make:rule SpamFree
Creates app/Rules/MustBeFiveCharacters.php
	$validatedData = request()->validate([
		'title' => new App\Rules\MustBeFiveCharacters,
		'body' => 'required'
	]);
If need to pass arguments to the rule constructor, use new App\Rules\MustBeFiveCharacters($arg0, $arg1)

https://stackoverflow.com/questions/33624710/how-to-validate-money-in-laravel5-request-class#33624808
Validate money
	'amount' => "required|regex:/^\d*(\.\d{1,2})?$/"

Print validation errors in blade view
	@if (count($errors))
		<ul>
		@foreach($errors->all() as $error)
			<li>{{ $error }}</li>
		@endforeach
		</ul>
	@endif

Query Database
	$tasks = DB::table('tasks')->get();

DB migrations
Create the database.
Edit db credentials in .env

Rollback one migration
	php artisante migrate:rollback --step=1

Modifying a column
https://laravel.com/docs/5.8/migrations#modifying-columns
	composer require doctrine/dbal

Prevent the Schema length error
https://laracasts.com/discuss/channels/laravel/php-artisan-migrate-errorclass-appprovidersschema-not-found
https://laracasts.com/discuss/channels/general-discussion/syntax-error-or-access-violation-1071-specified-key-was-too-long
Open app/Providers/AppServiceProvider.php, write:

	use Illuminate\Support\Facades\Schema;

Inside boot method write:
	Schema::defaultStringLength(191);

Run migration
	php artisan migrate

Migration files in database/migrations
Give it a name that corresponds to what I am doing
	php artisan make:migration create_tasks_table --create=tasks
To apply more changes, clear the dump
	composer dump-autoload
	php artisan cache:clear
	php artisan config:clear
Migrate the database
	php artisan migrate
To modify a schema, edit the migration file and
	php artisan migrate:refresh
Rollbacks the migration and re-runs it.

Drop every table and start from scratch
	php artisan migrate:fresh

To undo last migration
	php artisan migrate:rollback
Undo everything
	php artisan migrate:reset

Seeder will load and inesrt data into the database
	php artisan make:seeder ListingsTableSeeder
Edit database/ListingsTableSeeder.php at the run method:
	$path = base_path() . '/database/data.json';
	$file = File::get($path);
	$data = json_decode($file, true);
	DB::table('listings')->insert($data);

Edit database/DatabaseSeeder.php run method with:
	$this->call(ListingsTableSeeder::class);
When we run the seeder, any code in the run method is executed.
	php artisan db:seed

Make a model
	php artisan make:model Task
File is created at app/Task.php
Add castings as an class array variable
	protected $casts = [
      'amenity_wifi' => 'boolean',
      'amenity_pets_allowed' => 'boolean',
      'amenity_tv' => 'boolean',
      'amenity_kitchen' => 'boolean',
      'amenity_breakfast' => 'boolean',
      'amenity_laptop' => 'boolean'
    ];
Create the model and table
	composer dump-autoload
	php artisan make:model Task -m
Create the model, table and controller
	php artisan make:model Task -mc
Update the filename
	mv app/Http/Controllers/Post{,s}Controller.php
Migrate the database
	php artisan migrate
Make a change and refresh
	php artisan migrate:refresh
Do some tinkering
	php artisan tinker
	$task = new App\Task;
	$task->body = 'Go to the market';
	$task->save();
Replicate a model
$post = Post::find(1);
$newPost = $post->replicate();
$newPost->save();
This grabs the first post, calls replicate and assigns it to a $newPost
variable, then finally saves it as a new record in the database.
The replicating event will fire as part of this flow. 

Events
https://laravel-news.com/laravel-model-events-getting-started
The replicating event is added for when you want to make a copy of a model.

Make a controller
	php artisan make:controller TasksController
It creates it in app/Http/Controllers/TasksController.php

Create a factory
	php artisan make:factory ClientFactory
New factory is at database/factories/ClientFactory.php
Order 10 factories
	php artisan tinker
	factory('App\Client', 10)->create();
	App\Client->all();

Using CSRF field. Add it to a blade view
	{{ csrf_field() }}
	@csrf

Email layout testing
	php artisan make:mail Welcome --markdown=emails.welcome
Return a class instance as a view
	return new App\Mail\Welcome;
Files created:
app/Mail
resources/views/emails

Collection dump and dd method
	$videos = App\Video::all();
	$videos = $videos
		->shuffle()
		->dump()
		->filter->archived()
		->dump()
		->pluck('title')
		->dump();
->dd() will dump and stop the execution.

Custom 'If'
	@member
		<p>You are a subscribed user.</p>
	@else
		<p>You are just a guest.</p>
	@endmember
Open AppServiceProvider.php, at boot method write:
	\Blade:if('member', function(){
		// return true;
		return auth()->check() && auth()->user()->isSubscribed();
	});
	\Blade:if('guest', function($param1){
		// return true;
		//return !auth()->check() && auth()->user()->isSubscribed();
		return auth()->guest();
	});
Pass an argument
	@guest('myargument1')
Clear view cache
	php artisan view:clear
Simulate a login
	auth()->loginUsingId(1);
Lumen
https://lumen.laravel.com/docs/6.x
	composer global require "laravel/lumen-installer"
	php -S localhost:8080 -t public/

Front end presets
	php artisan preset none
	php artisan preset bootstrap

https://laravel.com/docs/5.6/authentication#introduction
See Path Customization, Username Customization and Retrieving The Authenticated User
	php artisan make:auth
	php artisan migrate:refresh
Compile javascript and other items
	npm run dev
https://github.com/rails/webpacker/issues/422
https://github.com/sass/node-sass/issues/1812
https://stackoverflow.com/questions/49675098/enoent-no-such-file-or-directory-scandir-c-code-myproj-content-node-modules
https://github.com/yarnpkg/yarn/issues/3485
	npm rebuild node-sass
Add that to package.json
	vim package.json
{
  "scripts": {
    "postinstall": "npm rebuild node-sass"
  }
}
Now can do
	npm run postinstall

CORS
https://laracasts.com/discuss/channels/requests/laravel-5-cors-headers-with-filters
Edit bootstrap/app.php
// allow origin
header('Access-Control-Allow-Origin: *');
// add any additional headers you need to support here
header('Access-Control-Allow-Headers: Origin, Content-Type');

CSRF Protection
https://laravel.com/docs/5.6/csrf

https://laravel.com/docs/5.6/passport#consuming-your-api-with-javascript

Email setup
https://github.com/swiftmailer/swiftmailer
https://swiftmailer.symfony.com/docs/introduction.html
https://stackoverflow.com/questions/31378357/laravel-5-sending-email#31379928
https://github.com/swiftmailer/swiftmailer/commit/12a1510b0d29ccc33d772649415ddc43250dbb13
	php artisan make:mail Welcome
https://laravel.com/docs/5.6/mail#markdown-mailables
	php artisan make:mail WelcomeMD --markdown="emails.welcomeMD"
	php artisan vendor:publish --tag=laravel-mail
Dates
https://scotch.io/tutorials/easier-datetime-in-laravel-and-php-with-carbon
Time zone
https://stackoverflow.com/questions/31475014/how-to-set-local-timezone-in-laravel
User::find(1)->foobazed_at->timezone(Auth::user()->timezone);

Today
Calling this gives you a Carbon instance set to today and the timestamp set at 00:00:00
Basically the start of the day.
Another helper that pairs well with this is the now() helper which does
the same thing but sets the time to the current time.
$today = today(); 

https://stackoverflow.com/questions/17591181/how-to-get-the-current-url-inside-if-statement-blade-in-laravel-4#17591908
if (Request::is('admin/*'))

Eloquent relationships
https://laravel.com/docs/5.6/eloquent-relationships
	return $this->hasMany('App\Comment');
	return $this->hasMany('App\Comment', 'foreign_key');
	return $this->hasMany('App\Comment', 'foreign_key', 'local_key');

Files
https://laravel.com/docs/5.7/filesystem
	$file->store('vehicles', 'public');
Print url
	Storage::url('file.jpg');
	asset('storage/file.txt');
Remember, if you are using the local driver,
all files that should be publicly accessible should be placed in the storage/app/public directory.
Furthermore, you should create a symbolic link at  public/storage which points to the storage/app/public directory.
	cd public
	ln -s ../app/storage/public storage
	php artisan storage:link
Delete file
	Storage::disk('s3')->delete('folder_path/file_name.jpg');

Upload files
https://laraveldaily.com/upload-multiple-files-laravel-5-4/

Create an app user
use App\Users;
use Illuminate\Support\Facades\Hash;
$user = new User;
$user->name = 'Demo';
$user->email = 'demo@example.com';
$user->password = Hash::make('demo');
$user->save();

Events & listeners
https://laravel-news.com/laravel-5-8-9
	artist event:cache

Laravel search string
https://laravel-news.com/laravel-search-string
Article::usingSearchString('title:"My blog article" or not published sort:-created_at');

Blade filters
https://laravel-news.com/laravel-blade-filters-package
{{ 'john' | ucfirst }} // John

https://laravel-news.com/junges-laravel-acl
https://github.com/mateusjunges/laravel-acl

Lazy Collection
https://github.com/laravel/framework/pull/29415
$projects = \App\Project::cursor();
foreach($projects->take(500) as $project){
	logger($project->name);
}

How to use a forked Laravel Package instead of the original?
https://phpreel.medium.com/how-to-use-a-forked-laravel-package-instead-of-the-original-90dd5b64068a
