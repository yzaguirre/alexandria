Check if dm_crypt is compiled
	grep -i config_dm_crypt /boot/config-$(uname -r)
Check if loaded
	lsmod | grep dm_crypt
If not loaded, load
	modprobe dm_crypt

LUKS - Linux Unified Key Setup
http://elbinario.net/2014/12/19/cifrar-usb-con-luks/
	apt install cryptsetup
Creating a vault inside a file
Create an empty file to hold our vault.
	dd if=/dev/zero of=~/myvault.vol bs=1M count=[size]

Create an encrypted filesystem inside the myvault.vol file
	sudo luksformat -t vfat ~/myvault.vol
	sudo luksformat -t ext4 ~/myvault.vol
Or
	sudo cryptsetup luksFormat ~/myvault.vol
But you have to format the mapper drive using fdisk to an apropiate file system (eg. ext4)
Print defaults for encryption drive are
	less /proc/crypto

Get a detailed report
	cryptsetup luksDump ~/myvault.vol
Type cryptsetup --help to get a list of possible actions that can be performed on your vault.
Unlock the vault
	cryptsetup luksOpen ~/myvault.vol myvault
your vault will be made available in /dev/mapper/
Mount the vault under a directory in /home/user/ for easy access.
	mkdir ~/vault
	mount -o uid=1000,gid=1000 /dev/mapper/myvault ~/vault
The user ID/group ID arguments that we specify here are specifically for the FAT32 filesystem
With an ext4 filesystem these extra flags are not necessary because the permissions of the directory itself determine access.
Use df -h ~/vault to keep an eye on the space available in the vault.
	mount -t ext4 -o journal_checksum /dev/mapper/myvault ~/vault

Before the mount, you might want for format the mapper
	mkfs -t ext4 /dev/mapper/myvault

To safely close the vault, you need to unmount it first
	umount ~/vault
Lock your vault
	cryptsetup luksClose myvault

To access your vault from Windows, visit http://www.freeotfe.org/download.html
to download the latest version of FreeOTFE or FreeOTFE Explorer. It's aportable application and very easy to use.

http://www.bootc.net/archives/2013/06/07/generating-a-new-gnupg-key/#Moving_keys_to_your_smart_cards
Create a ~10MB file to act as the container
	dd if=/dev/urandom of=gpg-key-backup.luks.img iflag=fullblock bs=1M count=10
Now, create the LUKS container with cryptsetup:
	sudo su
	chmod go= gpg-key-backup.luks.img
	cryptsetup --verbose --verify-passphrase luksFormat gpg-key-backup.luks.img
Now, you need to open the encrypted container, put a filesystem on it, and mount it so that we can use it:
	cryptsetup --verbose luksOpen gpg-key-backup.luks.img gpg-key-backup
	mkfs.ext4 /dev/mapper/gpg-key-backup

	mkdir /mnt/gpg-key-backup
	mount -t ext4 -o journal_checksum /dev/mapper/gpg-key-backup /mnt/gpg-key-backup
	chown bootc: /mnt/gpg-key-backup
	chmod go= /mnt/gpg-key-backup
	exit
We can now carry on as non-root again.

Let's tidy up and lock up our backup volume now:
	rm -rf /mnt/gpg-key-backup/gnupghome-temp/
	sudo -s
	umount /mnt/gpg-key-backup 
	cryptsetup luksClose gpg-key-backup
	exit
	unset GNUPGHOME

Backup LUKS
https://www.lisenet.com/2013/luks-add-keys-backup-and-restore-volume-header/
http://www.saout.de/pipermail/dm-crypt/2012-July/002564.html
LUKS format uses a metadata header and 8 key-slot areas that are being placed at the beginning of the disk. The passphrases are used to decrypt a single master key that is stored in the anti-forensic stripes.

Add a Backup Key
We would like to add a backup passphrase to the slot "1". This can be achieved by using the luksAddKey parameter:
	sudo cryptsetup luksAddKey --key-slot 1 /dev/sdb2
Change or Remove a Key
We can remove the supplied passphrase from the LUKS device by issuing:
	sudo cryptsetup luksRemoveKey /dev/sdb2
WARNING: removing the last passphrase makes the LUKS container permanently inaccessible!
If we want to change one of our existing passphrases, we can simply remove the unneeded one and add a new one to its place instead.

There are two critical components for decryption: the salt values in the header itself and the key-slots.

Ceate a header backup
	sudo cryptsetup luksHeaderBackup <device> --header-backup-file <file>
	sudo cryptsetup luksHeaderBackup /dev/sdb2 --header-backup-file /root/sdb2-header-backup
In case of disaster where our LUKS header gets broken, we can restore it by issuing the following command:
	sudo cryptsetup luksHeaderRestore <device> --header-backup-file <file>
WARNING: LUKS header restoration procedure will replace all key-slots, therefore only the passphrases from the backup will work afterwards!

Securely Erase a LUKS Header
LUKS filesystem can be identified by checking its volume header:
	sudo cryptsetup -v isLuks /dev/sdb2

The default LUKS header (with only one key-slot enabled) takes 1052672 bytes, what is slightly more than 1 MiB. Having 2 key-slots enabled this would extend the header almost twice (key-slots * stripes * keysize + offset bytes). Therefore overwriting the first 3 MiB would do the job for us:
	sudo su
	head -c 3145728 /dev/zero > /dev/sdb2; sync
	head -c 3145728 /dev/zero > myvault.vol; sync
