See go-lang.txt
I wrote a book about Go
https://www.practical-go-lessons.com/
https://news.ycombinator.com/item?id=26568014

https://quii.gitbook.io/learn-go-with-tests/
https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/
https://news.ycombinator.com/item?id=20374601

https://medium.com/@caspervonb/hello-go-3e207da92da0
https://news.ycombinator.com/item?id=16957307

https://talks.golang.org/2016/applicative.slide
http://engineroom.teamwork.com/go-learn/

https://golang.org/doc/install
Go 1.19 Released
https://go.dev/blog/go1.19
https://news.ycombinator.com/item?id=32321499
Go 1.18 Released
https://go.dev/blog/go1.18
https://news.ycombinator.com/item?id=30688208
Go 1.17.8 and Go 1.16.14 are released
https://groups.google.com/g/golang-announce/c/SUsQn0aSgPQ/m/gx45t8JEAgAJ?pli=1
https://twitter.com/golang/status/1491914601948233731
https://go.dev/dl/#go1.18
	wget https://go.dev/dl/go1.20.3.linux-amd64.tar.gz
	sha256sum go1.20.3.linux-amd64.tar.gz
979694c2c25c735755bf26f4f45e19e64e4811d661dd07b8c010f7a8e18adfca
	tar xf go1.20.3.linux-amd64.tar.gz -C /usr/local
	mkdir /usr/local/go/libs
	vim + ~/.profile
export GOROOT=/usr/local/go
export GOPATH=$GOROOT/libs
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
Windows
	winget install GoLang.Go
	choco install go
	scoop install go
Installer
	wget https://go.dev/dl/go1.20.3.windows-amd64.msi
	sha256sum go1.20.3.windows-amd64.msi
1ab2c4f1845617341c1d129c3fd201655792f861c6c3f610a7f82a9e7df2819a
	start go1.20.3.windows-amd64.msi
Binary at
%USERPROFILE%\go\bin
C:\Program Files\Go\bin

Usage
	go version

Test your installation
	vim hello.go
package main

import "fmt"

func main() {
    fmt.Printf("hello, world\n")
}
Compile
	go build
Compile for linux from PowerShell
	$env:GOOS="linux"
	$env:GOARCH="amd64"
	go build
See other architectures
	go tool dist list
Or Run
	go run hello.go
hello, world

Print go path
	go env GOPATH
	go env GOOS GOARCH
Install
	go install

https://golang.org/doc/effective_go.html

Crypto
Original class
https://gist.github.com/stuart-warren/93750a142d3de4e8fdd2
https://gist.github.com/jyap808/8250067
https://stackoverflow.com/questions/25715304/issues-with-openpgp-golang-gpg-library

openpgp Lib documentation
https://godoc.org/golang.org/x/crypto/openpgp#Encrypt
Signing attempt
https://stackoverflow.com/questions/21494035/cannot-sign-a-valid-gpg-key-using-golangs-openpgp-packet
pgp regulation https://www.phildev.net/pgp/pgp_clear_vs_mime.html
https://www.packetizer.com/rfc/rfc3156/
RFC 3156 ftp://ftp.rfc-editor.org/in-notes/rfc3156.txt 6.  Encrypted and Signed Data
RFC 4880 ftp://ftp.rfc-editor.org/in-notes/rfc4880.txt

Append to array
https://stackoverflow.com/questions/20954030/initialize-array-of-interfaces-in-golang
var names []interface{}
names = append(names, "first")
names = append(names, "second")

Bytes to string
https://blog.golang.org/strings
for i := 0; i < len(sample); i++ {
        fmt.Printf("%x ", sample[i])
    }

String interpolation
https://www.golinuxcloud.com/golang-string-interpolation/
thisDate := fmt.Sprintf("%d-%d-%d", thisYear, thisMonth, thisDay)

Flags
https://stackoverflow.com/questions/18429632/flag-package-in-go-do-i-have-to-always-set-default-value
optFile := flag.String("file", "", "Source file")
fn := *optFile
if fn == "" {
	fn = "/dev/stdin"
}

Write to file
https://gosamples.dev/write-file/
https://stackoverflow.com/questions/1821811/how-to-read-write-from-to-a-file-using-go
f, err := os.Create("file.txt")
if err != nil {
	log.Fatal(err)
}
// remember to close the file
defer f.Close()
_, err := f.WriteString(line + "\n")
if err != nil {
	log.Fatal(err)
}

https://github.com/gtank/cryptopasta
https://news.ycombinator.com/item?id=12107682s

https://github.com/jroimartin/gocui
