Speeding up Go's built-in JSON encoder for large arrays of objects
https://datastation.multiprocess.io/blog/2022-03-03-improving-go-json-encoding-performance-for-large-arrays-of-objects.html
https://news.ycombinator.com/item?id=30547067

https://stedolan.github.io/jq
https://github.com/stedolan/jq
https://mosermichael.github.io/jq-illustrated/dir/content.html
https://news.ycombinator.com/item?id=22626080
	apt install jq
Windows
	choco install jq

Example JSON
"parents": [
  {
    "sha": "54b9c9bdb225af5d886466d72f47eafc51acb4f7",
    "url": "https://api.github.com/repos/stedolan/jq/commits/54b9c9bdb225af5d886466d72f47eafc51acb4f7",
    "html_url": "https://github.com/stedolan/jq/commit/54b9c9bdb225af5d886466d72f47eafc51acb4f7"
  },
  {
    "sha": "8b1b503609c161fea4b003a7179b3fbb2dd4345a",
    "url": "https://api.github.com/repos/stedolan/jq/commits/8b1b503609c161fea4b003a7179b3fbb2dd4345a",
    "html_url": "https://github.com/stedolan/jq/commit/8b1b503609c161fea4b003a7179b3fbb2dd4345a"
  }
]

We want to pull out all of the "html_url" fields inside that array of parent commits and make a simple list of strings to go along with the "message" and "author" fields we already have.
	jq '[.[] | {message: .commit.message, name: .commit.committer.name, parents: [.parents[].html_url]}]'
Reading a JSON from GitHub API
	jq '.[]|{full_name,created_at}' repositories.json

How to process JSON using curl and jq?
https://www.youtube.com/playlist?list=PLKaiHc24qCTSOGkkEpeIMupEmnInqHbbV

Linux Shell Parsing JSON with jq
https://www.youtube.com/watch?v=NOlRKZF2JRo

JQ for JSON processing and GROUP BY
https://www.youtube.com/watch?v=X8ofFIC004o

JSON: Like a Boss
https://www.youtube.com/watch?v=_ZTibHotSew
	curl ... | jq -C . | less -R

Format JSON in VIM - Using jq
https://www.youtube.com/watch?v=PdC-zWfx73Q
:.!jq .

JSON JQ Linux Tool, Quick Tutorial
https://www.youtube.com/watch?v=CQuRAIN9nJk

gojq
https://github.com/itchyny/gojq
	wget https://github.com/itchyny/gojq/releases/download/v0.12.7/gojq_v0.12.7_linux_amd64.tar.gz
	tar xf gojq_v0.12.7_linux_amd64.tar.gz -C /usr/local/bin --strip-components=1 gojq_v0.12.7_linux_amd64/gojq
	tar xf gojq_v0.12.7_linux_amd64.tar.gz -C /usr/local/share/zsh/vendor-completions --strip-components=1 gojq_v0.12.7_linux_amd64/_gojq
Termux
	wget https://github.com/itchyny/gojq/releases/download/v0.12.7/gojq_v0.12.7_linux_arm64.tar.gz
	tar xf gojq_v0.12.7_linux_arm64.tar.gz -C /data/data/com.termux/files/usr/bin --strip-components=1 gojq_v0.12.7_linux_arm64/gojq
	tar xf gojq_v0.12.7_linux_arm64.tar.gz -C /data/data/com.termux/files/usr/share/zsh/vendor-completions --strip-components=1 gojq_v0.12.7_linux_arm64/_gojq
Windows
	wget https://github.com/itchyny/gojq/releases/download/v0.12.7/gojq_v0.12.7_windows_amd64.zip
	7z e gojq_v0.12.7_windows_amd64.zip -oC:\Users\dyzag\bin gojq_v0.12.7_windows_amd64/gojq.exe gojq_v0.12.7_windows_amd64\_gojq
Homebrew
	brew install gojq
Parse chrome debug json
https://www.codegrepper.com/code-examples/shell/jq+to+array
See chromium/chromium.txt
	gojq '.[]|select(.type=="page")|{title: .title, url: .url}' chrome-2022-04-29_18.16.28.json

https://github.com/fiatjaf/jqview
simplest possible native GUI for inspecting JSON objects with jq
https://news.ycombinator.com/item?id=23433290
	wget https://github.com/fiatjaf/jqview/releases/download/v2/jqview_linux.tar.gz
	mv jqview /usr/local/bin/jqview
Windows
	wget https://github.com/fiatjaf/jqview/releases/download/v2/jqview_windows.zip
	7z x jqview_windows.zip -oC:\Users\dyzag\bin

Make JSON greppable!
https://github.com/tomnomnom/gron
gron
	wget https://github.com/tomnomnom/gron/releases/download/v0.7.1/gron-linux-amd64-0.7.1.tgz
	tar xzf gron-linux-amd64-0.7.1.tgz
	mv gron /usr/local/bin/
Termux
	wget https://github.com/tomnomnom/gron/releases/download/v0.7.1/gron-linux-arm64-0.7.1.tgz
	tar xzf gron-linux-arm64-0.7.1.tgz
	mv gron ~/bin/
Homebrew
	brew install gron
Windows
	choco install gron

Jello
CLI tool to filter JSON and JSON Lines data with Python syntax. (Similar to jq)
https://github.com/kellyjonbrazil/jello
https://www.reddit.com/r/linux/comments/nvz5b0/jello_v13_now_supports_dot_notation_commandline/
	sudo -H pip3 install jello
	cat data.json | jello _.foo
	cat data.json | jello '_["foo"]'

CLI tool and python library that converts the output of popular
command-line tools and file-types to JSON or Dictionaries.
This allows piping of output to tools like jq and simplifying
automation scripts.
https://kellyjonbrazil.github.io/jc/
https://github.com/kellyjonbrazil/jc
https://news.ycombinator.com/item?id=33448204
	dig example.com | jc --dig
	sudo -H pip3 install -U jc
Homebrew
	brew install jc

A simple CLI tool to print JSON and JSON Lines data
as a table in the terminal.
https://github.com/kellyjonbrazil/jtbl
	sudo -H pip3 install jtbl
	cat cities.json | jtbl

Extracting Objects Recursively with Jq
https://til.simonwillison.net/jq/extracting-objects-recursively
https://news.ycombinator.com/item?id=28026712

A command-line pager for JSON data.
https://jless.io
https://pauljuliusmartinez.github.io
https://github.com/PaulJuliusMartinez/jless
https://news.ycombinator.com/item?id=30452162
	wget https://github.com/PaulJuliusMartinez/jless/releases/download/v0.7.2/jless-v0.7.2-x86_64-unknown-linux-gnu.zip
	7z x -o/usr/local/bin jless-v0.7.2-x86_64-unknown-linux-gnu.zip
Homebrew
	brew install jless
Rust
	cargo install jless

Usage
	jless file.json
	cat commits.json | jless

Powershell ConvertTo-Json
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertto-json?view=powershell-7.2
	ConvertTo-Json
	  [-InputObject] <Object>
	  [-Depth <Int32>]
	  [-Compress][-EnumsAsStrings]
	  [-AsArray]
	(Get-UICulture).Calendar | ConvertTo-Json
	@{Account="User01";Domain="Domain01";Admin="True"} | ConvertTo-Json -Compress
	Get-Date | Select-Object -Property * | ConvertTo-Json
	Get-Date | Select-Object -Property * | ConvertTo-Json | ConvertFrom-Json

Zed
https://www.brimdata.io/blog/introducing-zq/
https://github.com/brimdata/zed
https://news.ycombinator.com/item?id=31166956
	wget https://github.com/brimdata/zed/releases/download/v1.0.0/zed-v1.0.0.linux-amd64.tar.gz
	wget https://github.com/brimdata/zed/releases/download/v1.0.0/zed-checksums.txt
	sha256sum -c --ignore-missing zed-checksums.txt
	tar xf zed-v1.0.0.linux-amd64.tar.gz -C /usr/local/bin zed zq
Windows
	wget https://github.com/brimdata/zed/releases/download/v1.0.0/zed-v1.0.0.windows-amd64.zip
	Get-FileHash zed-v1.0.0.windows-amd64.zip -Algorithm SHA256 | Format-List
	7z x -oC:\Users\dyzag\bin zed-v1.0.0.windows-amd64.zip zed.exe zq.exe
Homebrew
	brew install brimdata/tap/zq

A TUI playground to experiment with jq
https://github.com/noahgorstein/jqp
https://www.reddit.com/r/commandline/comments/xit2dz/jqp_a_tui_playground_for_jq/
	wget https://github.com/noahgorstein/jqp/releases/download/v0.2.0/jqp_0.2.0_Linux_x86_64.tar.gz
	wget https://github.com/noahgorstein/jqp/releases/download/v0.2.0/checksums.txt
	sha256sum -c --ignore-missing checksums.txt
	tar xf jqp_0.2.0_Linux_x86_64.tar.gz -C /usr/local/bin jqp
Windows
	wget https://github.com/noahgorstein/jqp/releases/download/v0.2.0/jqp_0.2.0_Windows_x86_64.tar.gz
	tar xf jqp_0.2.0_Windows_x86_64.tar.gz -C ..\bin jqp.exe
Homebrew
	brew install noahgorstein/tap/jqp

Usage
	jqp --help
	jqp -v
	jqp -f path/file.txt
STDIN
	curl "https://api.github.com/repos/stedolan/jq/issues?per_page=2" | jqp
ctrl-c	quit program

jid
json incremental digger
https://github.com/simeji/jid
	wget https://github.com/simeji/jid/releases/download/v0.7.6/jid_linux_amd64.zip
	wget https://github.com/simeji/jid/releases/download/v0.7.6/checksums.txt
	sha256sum -c --ignore-missing checksums.txt
Windows
	wget https://github.com/simeji/jid/releases/download/v0.7.6/jid_windows_amd64.zip
	7z x -o"..\bin" jid_windows_amd64.zip
Homebrew
	brew install jid

Usage
	Get-Content file.json | jid
	curl -s http://rdg.afilias.info/rdap/domain/example.info | jid

command line JSONPath processing tool (like `jq` but using JSONPath syntax)
https://github.com/kjozsa/jsp
