If the services on your network require more than a few self-signed certificates it may be worth the
additional effort to setup your own internal Certification Authority (CA). Using certificates signed by your own CA, 
allows the various services using the certificates to easily trust other services using
certificates issued from the same CA.
1. First, create the directories to hold the CA certificate and related files:
	# mkdir -p /etc/ssl/{private,newcerts,certs,requests,CA}
	# cd /etc/ssl
2. The CA needs a few additional files to operate, one to keep track of the last serial number used
by the CA, each certificate must have a unique serial number, and another file to record which
certificates have been issued:
	# echo '01' > CA/serial
	# touch CA/index.txt

3. The third file is a CA configuration file. Though not strictly necessary, it is very convenient
when issuing multiple certificates. Edit /etc/ssl/openssl.cnf, and in the [ CA_default ]
change:
dir = /etc/ssl/		# Where everything is kept
database = $dir/CA/index.txt	# database index file.
certificate = $dir/certs/cacert.pem # The CA certificate
serial = $dir/CA/serial 		# The current serial number
private_key = $dir/private/cakey.pem	# The private key

4. Next, create the self-signed root certificate:
	openssl req -new -x509 -extensions v3_ca -keyout private/cakey.pem -out certs/cacert.pem -days 3650
or	openssl req -new -x509 -extensions v3_ca -keyout private/cakey.pem -out certs/cacert.pem -days 3650 -config /etc/ssl/openssl.cnf
You will then be asked to enter the details about the certificate.

A1. CREATE private key for a site
	# openssl genrsa -des3 -out private/sitio1.key 2048
CREATE Certificate Sign Request CSR for a site

A2. If you plan to have your certificate signed by a CA (including one that you run yourself),
generate a public key and a certificate signing request (CSR):
	# openssl req -new -key private/sitio1.key -out requests/sitio1.csr
x	# openssl req -new -nodes -keyout private/apache-key.pem -out requests/apache-req.pem -config /etc/ssl/openssl.cnf

Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:Washington
Locality Name (eg, city) []:Bellingham
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Example Company, LTD.
Organizational Unit Name (eg, section) []:Network Operations
Common Name (eg, YOUR name) []:secure.example.org
Email Address []:dom@example.org
Please enter the following ‘extra’ attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

The Common Name should match the name that clients will use to access your server. Be
sure to get the other details right if you plan to have the CSR signed by a third-party CA

6. You are now ready to start signing certificates. The first item needed is a Certificate Signing
Request (CSR), see Section 5.2, "Generating a Certificate Signing Request (CSR)" [p. 171]
for details. Once you have a CSR, enter the following to generate a certificate signed by the CA:
	# openssl ca -in requests/sitio1.csr -config /etc/ssl/openssl.cnf
	# openssl ca -in requests/sitio1.csr -out certs/sitio1.crt -config /etc/ssl/openssl.cnf
or	sudo openssl ca -infiles apache-req.pem -out apache-cert.pem -config /etc/ssl/openssl.cnf

After entering the password for the CA key, you will be prompted to sign the certificate, and
again to commit the new certificate. You should then see a somewhat large amount of output
related to the certificate creation.

7. There should now be a new file, /etc/ssl/certs/01.pem, containing the same output. Copy
and paste everything beginning with the line: -----BEGIN CERTIFICATE----- and continuing
through the line: ----END CERTIFICATE----- lines to a file named after the hostname of the
server where the certificate will be installed. For example mail.example.com.crt, is a nice
descriptive name.
Subsequent certificates will be named 02.pem, 03.pem, etc.
			Replace mail.example.com.crt with your own descriptive name.
8. Finally, copy the new certificate to the host that needs it, and configure the appropriate
applications to use it. The default location to install certificates is /etc/ssl/certs. This enables
multiple services to use the same certificate without overly complicated file permissions.
For applications that can be configured to use a CA certificate, you should also copy the /etc/
ssl/certs/cacert.pem file to the /etc/ssl/certs/ directory on each server.

9. Extra
Check out tunnels/openssl.txt

Summary
	mkdir -p /etc/ssl/{private,certs,requests,CA}
	cd /etc/ssl
	echo '01' > certs/serial
	touch CA/index.txt
	openssl req -new -x509 -extensions v3_ca -keyout private/cakey.pem -out certs/cacert.pem -days 3650
Create key and csr
	openssl genrsa -des3 -out private/sitio1.key.secure 2048
	openssl req -new -key private/sitio1.key -out requests/sitio1.csr
Sign requests
	openssl ca -in requests/sitio1.csr -out certs/sitio1.crt -config /etc/ssl/openssl.cnf
