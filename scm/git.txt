See ./gitforwindows.txt

Inside the Hidden Git Folder - Computerphile
https://www.youtube.com/watch?v=bSA91XTzeuA
13 Advanced (but useful) Git Techniques and Shortcuts
https://www.youtube.com/watch?v=ecK3EnyGD8o

https://bakkenbaeck.github.io/a-random-walk-through-git/

https://akrabat.com/a-few-git-tips/

https://mikkel.ca/blog/git-is-my-buddy-effective-solo-developer/
https://news.ycombinator.com/item?id=26239068

https://github.blog/2022-01-24-highlights-from-git-2-35/
https://news.ycombinator.com/item?id=30068776

https://github.blog/2020-07-27-highlights-from-git-2-28/
https://news.ycombinator.com/item?id=23966948

https://github.blog/2020-01-13-highlights-from-git-2-25/
https://news.ycombinator.com/item?id=22038007

https://bitbucket.org/BitPusher16/dotfiles/raw/49a01d929dcaebcca68bbb1859b4ac1aea93b073/refs/git/git_examples.sh
https://news.ycombinator.com/item?id=21189256

https://www.digitalocean.com/community/tutorials/how-to-use-git-a-reference-guide
https://github.com/k88hudson/git-flight-rules#exporting-a-repository-as-a-zip-file
git contribution workflow
https://diasp.eu/posts/6508007 and https://diasp.eu/posts/6519103
https://github.com/mindfulness-at-the-computer/mindfulness-at-the-computer/blob/master/CONTRIBUTING.md#workflow-overview
Fork a project, clone the fork repo
	git clone clone-repo
Add the upstream project
	git remote add upstream http://gitserver.domain/path
Create a local branch, for a feature or bug fix
	git branch mytake
	git checkout mytake
Do it in one command
	git checkout -b mytake
Push commited changes. It takes current branch, sends it to remote branch called mytake
	git push origen mytake
Set up the local and remote branches as tracking branches
	git push -u origen mytake
Send other branches
	git push origin master # current branch send to master in origin
	git checkout dev
	git push origin dev # current branch to dev in origin
	git checkout qa
	git push origin qa
Regularly keep the local branch in sync with upstream
	git fetch upstream
	git merge upstream/master # merges the master branch to mytake branch
Alternatively
	git pull upstream/master

Commit
	git commit
Commit with message
	git commit -m "New files added"
Commit files already staged
	git commit -a
	git commit -am "Modified this file"
https://www.stefanjudis.com/today-i-learned/git-commit-accepts-several-message-flags-m-to-allow-multiline-commits/
https://news.ycombinator.com/item?id=23767866
	git commit -m "Fix issue" -m "Lorem ipsum..." -e

Remove a file
	git rm Test2.txt
	git commit -m "Removed a file"

Remove untracked files
https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree#64966
https://superuser.com/questions/335496/git-how-to-delete-all-untracked-files
	git clean -n
	git clean -f # will DELETE files permanently
	git clean -X # Remove files listed in .gitignore
Remove all files and directories that git does not track
	git clean -fdx

Restore a single file
https://stackoverflow.com/questions/6624036/restore-file-from-old-commit-in-git
	git checkout 'master@{7 days ago}' -- path/to/file.txt

http://ohshitgit.com/
https://news.ycombinator.com/item?id=15951825

https://github.com/k88hudson/git-flight-rules
How to write commit messages
https://chris.beams.io/posts/git-commit/
https://news.ycombinator.com/item?id=13889155

https://news.ycombinator.com/item?id=14045787

https://git-scm.com/
https://github.com/blog/2242-git-2-10-has-been-released
http://www.systutorials.com/366/set-up-git-server-through-ssh-connection/
https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server

https://codewords.recurse.com/issues/two/git-from-the-inside-out
https://news.ycombinator.com/item?id=12802949

User config
https://stackoverflow.com/questions/12254076/how-do-i-show-my-global-git-configuration
	git config --list --show-origin
System config: /etc/gitconfig
	git config --system core.editor "/bin/vim"
	git config --system core.editor "C:/Program Files/Vim/vim82/vim.exe"
Global config: ~/.gitconfig
	git config --global user.name "David Y. Gonzalez"
	git config --global user.email "dvdyzag@gmail.com"
	git config --global init.defaultBranch main
https://stackoverflow.com/questions/46992596/configure-gpg-for-git-on-windows
https://neurotechnics.com/blog/configure-gpg-to-sign-git-commits-in-windows/
	git config --global gpg.program "C:/Program Files (x86)/GnuPG/bin/gpg.exe"
	git config --global user.signingkey DA03396D49F620F3
	git config --global commit.gpgsign true
	git config --global tag.gpgSign true
Optionally, you may need to disable TTY if your IDE doesn't like talking to gpg properly:
	echo 'no-tty' >> ~/.gnupg/gpg.conf
Local config: .git/config
	git config user.name "user"
	git config --local user.signingkey 3AA5C34371567BD2
	git config core.autocrlf true
Push options
	git config --global push.default simple
git proxy
http://stackoverflow.com/questions/128035/how-do-i-pull-from-a-git-repository-through-an-http-proxy
	git config --global http.proxy $http_proxy
	git config --global https.proxy $http_proxy

https://stackoverflow.com/questions/10018533/is-it-possible-to-git-status-only-modified-files#10018728
	git ls-files -m

Log options
https://coderwall.com/p/euwpig/a-better-git-log
	git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	git log --all --graph --decorate --oneline --abbrev-commit
Lists version history for a file, including renames
	git log --follow [file]
	git log --author=your-username
	git log --branches[=<branch>]
	git log --grep="change"
	git log --oneline
	git log -p
	git log -2
	git shortlog
	git log -- test.txt
	git log --graph
	git log --graph --decorate
	man git log
https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/
https://news.ycombinator.com/item?id=16677308
	git log -G 'chef-client' --graph --oneline --stat --pickaxe-all
Grep
	git log --grep
Set a alias
	git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	git config --global alias.lg2 "log --all --graph --decorate --oneline --abbrev-commit"
If you want to see the lines that changed
	git lg -p
Diff color attributes
	git config --global color.diff.old "red strike"
	git config --global color.diff.new "green italic"
	git diff
	git diff --color-words
Colorize the output always
https://stackoverflow.com/questions/12795790/how-to-colorize-git-status-output
https://unix.stackexchange.com/questions/44266/how-to-colorize-output-of-git
	git -c color.status=always status

Diff algorith
	git diff --histogram
	git config --global diff.algorithm "histogram"

https://stackoverflow.com/questions/2389361/undo-a-git-merge
	git reset --hard HEAD~5
Unstage a file
https://stackoverflow.com/questions/6919121/why-are-there-2-ways-to-unstage-a-file-in-git
	git reset file
Create Branch
	git branch hello-england
	git checkout hello-england
Show branches
https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
	git for-each-ref --sort=-committerdate refs/heads/
	git checkout branch_id
If branch is remote
	git checkout -b hello-england ref/remote/origin/hello-england
Push with present branch
	git push origin hello-england
merge to master
	git checkout master
	git merge hello-england
delete branch
	git branch -d hello-england
delete branch at github
	git push origin --delete hello-england
rename a branch
	git branch -m oldname newname
Show current branch
	git branch
Diff Against the Previous Commit
	git show $COMMIT
	git diff HEAD^ HEAD
Send signed tags
	git tag -s
	git push origen --follow-tags

Add origin
	git remote add origin git@server:yzaguirre/CustomerScaffold.git
	git remote add write-repo git@server:yzaguirre/CustomerScaffold.git
Remove origin
	git remote rm origin git@server:yzaguirre/CustomerScaffold.git

Make Release branch
	git tag -s v1.0
	git checkout -b release master

Removes the file from version control but preserves the file locally
	git rm --cached [file]
Ignore files
Excludes files defined globally
	git config --global core.excludesfile
	git config --global core.excludesfile '/etc/gitignore'
	sudo vim /etc/gitignore
Local gitignore (recommended)
	vim .gitignore
Lists all ignored files in this project
	git ls-files --other --ignored --exclude-standard
https://laravel-news.com/debugging-gitignore
	git check-ignore -v path/to/ignored/file
Include files
https://stackoverflow.com/questions/11852558/gitignore-only-allow-certain-extensions-and-files
*
!.gitattributes
!.gitignore
!readme.md
!.gitkeep
!*.php
!*/
	
clone via SSH
	git clone git@github.com:dvdyzag/alec.git

clone via HTTPS
	git clone https://github.com/dvdyzag/alec.git

https://help.github.com/articles/using-ssh-over-the-https-port
Probar si tienes conexion ssh
	ssh -T -p 443 git@ssh.github.com
	
Host github.com
  Hostname ssh.github.com
  Port 443

	ssh -T git@github.com

How to rebase
https://www.digitalocean.com/community/tutorials/how-to-rebase-and-update-a-pull-request
	git rebase -S -i HEAD~x
If, however, you don't know how many commits you have made on your branch,
you'll need to find which commit is the base of your branch, which you can do by running the following command:
	git merge-base new-branch master
We'll use this commit hash to pass to the git rebase command:
	git rebase -S -i 66e506853b0366c87f4834bb6b39d341cd094fe9
Clean up a branch
    git checkout master
    git pull --rebase upstream master
    git push -f origin master
    git branch -d new-branch
    git push origin --delete new-branch

http://blog.davidecoppola.com/2016/11/howto-contribute-to-open-source-project-on-github/
https://news.ycombinator.com/item?id=12880792

Undo commit
http://stackoverflow.com/questions/927358/ddg#927386
	git commit -m "Something terribly misguided"
	git reset HEAD~
	<< edit files as necessary >>
	git add ...
	git commit -c ORIG_HEAD
Recover from remote
	git fetch origin
	git reset --hard origin/main

List files in a commit
https://stackoverflow.com/questions/424071/how-to-list-all-the-files-in-a-commit
	git show --pretty="" --name-only <SHA, tag>
	git diff-tree --no-commit-id --name-only <SHA, tag>
Use --name-status instead, if you want to see what happened to each file (Deleted, Modified, Added)
Files changed between commit
https://coderwall.com/p/lz0uva/find-all-files-modified-between-commits-in-git
	git diff --name-only <SHA, tag start> <SHA, tag end>
Get the names of all the files that have changed in the last 3 commits:
	git diff --name-only HEAD HEAD~3

Patch
	git diff > patch.diff
https://stackoverflow.com/questions/3368590/show-diff-between-commits
	git diff k73ud^..dj374
Restore a patch
https://stackoverflow.com/questions/15993861/git-create-patch-with-diff#15994287
	git apply patch.diff
Generate a patch file for the most recent five commit
Git will generate a patch file for each commit
	git format-patch HEAD^^^^^
It can also generate a cover letter, with stats, to describe the patch series
Make sure to edit the cover letter before sending
	git format-patch --cover -letter HEAD^^^^^
To send a patch series
	git send-email
To accept a set of patch files into your repositoy, use git am
This will append the set of patches into your commit history on your current branch
git am preserves the author names present in the patches
	git am *.patch

Email for git
https://news.ycombinator.com/item?id=17441060

Stashing
Git maintains the stash list (a stack) of stashed diffs.
	git stash list
View an individual stash diff
	git stash show
https://dev.to/yuvgeek/learn-the-hidden-feature-in-git-stash-k7b
	git stash push -m "Feature 2 in progress"
Recover a stash
	git stash apply stash@{0}
	git stash pop 0
Remove a stash
	git stash drop stash@{0}
Remove all the stash
	git stash clear
Stage (new in 2.35)
	git stash --staged

Identities
https://www.micah.soy/posts/setting-up-git-identities/
https://news.ycombinator.com/item?id=22672491

Apply .gitignore
https://stackoverflow.com/questions/19663093/apply-gitignore-on-an-existing-repository-already-tracking-large-number-of-file
	git ls-tree --name-only --full-tree -r HEAD
	git rm -r --cached cache/
	git commit -m ".gitignore is now working"

Erase from git history
https://stackoverflow.com/questions/43762338/how-to-remove-file-from-git-history
	git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch path_to_file" HEAD
	git filter-branch --tree-filter 'rm -f <path_to_file>' HEAD
	git push origin --force --all

Zip file
https://stackoverflow.com/questions/3423540/zip-latest-committed-changes-only
017 Introduction to Git Archive
https://www.youtube.com/watch?v=HQU8Y38KgdA
Using Git Archive to Export Files
https://www.youtube.com/watch?v=QddBztXi2o8
	git archive -o ../latest.zip some-commit
	git archive -o ../latest.zip some-commit $(git diff --name-only earlier-commit some-commit)
	git archive --prefix=trick_15.0.0/ -o trick15.tar.gz 15.0.0 trick_source/
Available formats
	git archive -l
Make zip of changed files
https://stackoverflow.com/questions/23115777/git-archive-with-unstaged-changes
	git diff --name-only -a | xargs zip myUnstagedChanges.zip

Bundle a repository
https://git-scm.com/docs/git-bundle
https://twitter.com/PrincewillIroka/status/1396106203697139712
https://dev.to/princewilliroka/how-to-bundle-export-a-git-repo-as-a-single-file-without-losing-the-git-history-3111
https://stackoverflow.com/questions/11792671/how-to-git-bundle-a-complete-repo
Every branch
	git bundle create reponame.bundle --all
Just the main branch
	git bundle create reponame.bundle main
Unbundle with
	git clone reponame.bundle

Git undo: We can do better
https://blog.waleedkhan.name/git-undo/
https://news.ycombinator.com/item?id=27579701
Never use `git checkout`, but `git switch`
and "git restore` that were introduced in git 2.15 IIRC.
They are much less confusing and error prone.

gc
https://stackoverflow.com/questions/8633981/what-does-auto-packing-the-repository-for-optimum-performance-mean
Auto packing the repository in background for optimum performance.
See "git help gc" for manual housekeeping.

New in Git: switch and restore
https://www.banterly.net/2021/07/31/new-in-git-switch-and-restore/
https://news.ycombinator.com/item?id=28024972

https://www.atlassian.com/git/tutorials/rewriting-history
	git add file.txt
	git commit --amend
	git commit --amend --no-edit

Root directory of a repository
https://stackoverflow.com/questions/957928/is-there-a-way-to-get-the-git-root-directory-in-one-command
	git rev-parse --show-toplevel
Make an alias
	git config --global alias.root 'rev-parse --show-toplevel'
	git root
This adds the whole working tree from any directory in the repo
	git add :/

FS Monitor
Activate
	git config core.useBuiltinFSMonitor true
	git config core.untrackedCache true
Usage
	git fsmonitor--daemon start
	git fsmonitor--daemon run
	git fsmonitor--daemon stop
	git fsmonitor--daemon status
