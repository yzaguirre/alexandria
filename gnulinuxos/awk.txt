An interactive introduction to Awk
https://www.n8ta.com/projects/awk.html
https://news.ycombinator.com/item?id=27437401

Explain the following statement:
ls -lhrS | grep -i $USER | tail -3 | awk '{ print $5, $9; }'
Answer:
a) List the files
b) Grep only lines matching my user name
c) Get the 3 last results
d) Manipulate the string and print the 5th and 9th parameters

ls -la | awk '{print $9}' > output.txt

http://www.skeeve.com/awk-sys-prog.html
https://news.ycombinator.com/item?id=22304017
https://news.ycombinator.com/item?id=15549318
https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md
http://blog.jpalardy.com/posts/why-learn-awk/
http://blog.jpalardy.com/posts/awk-tutorial-part-1/
http://blog.jpalardy.com/posts/awk-tutorial-part-2/
http://blog.jpalardy.com/posts/awk-tutorial-part-3/

https://github.com/learnbyexample/learn_gnuawk
https://learnbyexample.github.io/books/
https://news.ycombinator.com/item?id=22758217

awk '{printf("%-8s made $%6.2f\n", $1, $2 * $3)}' emp.data | sort
awk '$2 * $3 > 50 {printf("%s made more than 50 dollars\n", $1)}'
awk '$1 == "Melvyn" {printf("%s made more than 50 dollars\n", $1)}'
awk '/Mark/{printf("%s made more than 50 dollars\n", $1)}'
awk '$1 == "Mark" || $1 == "Beth" {printf("%s made more than 50 dollars\n", $1)}'

awk 'NF > 3' junk.data

Learning Awk Is Essential For Linux Users
https://www.youtube.com/watch?v=9YOZmI-zWok
