https://www.rust-lang.org/
https://github.com/rust-lang/rust
https://www.rust-lang.org/downloads.html
	wget https://static.rust-lang.org/dist/rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz
	wget https://static.rust-lang.org/dist/rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz.asc
	wget https://static.rust-lang.org/dist/rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz.asc.sha256
	wget https://static.rust-lang.org/dist/rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz.sha256
Verify
	gpg2 --verify rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz.asc
	sha256sum -c rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz.sha256
	sha256sum -c rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz.asc.sha256
Install
	tar xf rust-1.58.1-x86_64-unknown-linux-gnu.tar.gz
	cd rust-1.58.1-x86_64-unknown-linux-gnu
	sudo ./install.sh
To uninstall:
    sudo /usr/local/lib/rustlib/uninstall.sh

Src
	wget https://static.rust-lang.org/dist/rustc-1.58.1-src.tar.gz
	wget https://static.rust-lang.org/dist/rustc-1.58.1-src.tar.gz.asc
	wget https://static.rust-lang.org/dist/rustc-1.58.1-src.tar.gz.sha256
	wget https://static.rust-lang.org/dist/rustc-1.58.1-src.tar.gz.asc.sha256
	gpg2 --verify rustc-1.58.1-src.tar.gz.asc
	sha256sum -c rustc-1.58.1-src.tar.gz.sha256
	sha256sum -c rustc-1.58.1-src.tar.gz.asc.sha256
	tar xf rustc-1.58.1-src.tar.gz -C /usr/local/src
Install racer (may take a while)
	cargo install racer
Edit 
	vim + ~/.profile
export RUST_SRC_PATH=/usr/local/src/rustc-1.58.1/src
PATH=$PATH:/home/david/.cargo/bin

Rustup
https://news.ycombinator.com/item?id=11691760
http://blog.rust-lang.org/2016/05/13/rustup.html
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
Update to latest rust
	rustup update stable
Uninstall
	rustup self uninstall

Print version
	rustc -V
or
	rustc - -version

The Rust libraries can be found in /usr/local/lib/rustlib

https://rust-lang-nursery.github.io/cli-wg/
https://news.ycombinator.com/item?id=21611379

Zero to Production in Rust
https://www.zero2prod.com/index.html?country=Guatemala&discount_code=NA60
https://news.ycombinator.com/item?id=27405395

Rust projects
fd
bat
ripgrep
exa
lsd
sk
hx

https://rustup.rs/
https://ayende.com/blog/185665-A/writing-my-network-protocol-in-rust
https://zsiciarz.github.io/24daysofrust/book/vol1/day20.html
http://blog.rust-lang.org/2015/12/10/Rust-1.5.html
https://news.ycombinator.com/item?id=1.8.0980

IDE
For Vim
https://github.com/racer-rust/vim-racer
Online
play.rust-lang.org
Visual Studio Code
	ext install rust-lang.rust
Sublime Text
https://github.com/rust-lang/rust-enhanced
Vim
https://github.com/rust-lang/rust.vim

The rusti is an interactive shell or Read-Evaluate-Print-Loop (REPL)
https://github.com/murarth/rusti

rs is the standard extension of Rust code files
Source file names may not contain spaces

Compile
	rustc welcome.rs
Run
	./welcome
or
	rustc welcome.rs -o start
	
The rustc -O command produces a native code that is optimized for execution speed 
(which is equivalent to rustc -C opt-level=2;
the most optimized code is generated for rustc -C opt-level = 3).

Cargo is Rust's package and dependency manager
http://doc.crates.io/guide.html
	cargo new hello_world --bin
--vcs none
--bin

Compile (This will fetch all of the dependencies and then build them, along with the project)
	cargo build
Run
	./target/debug/hello_world
or
	cargo run
It creates Cargo.lock
If you're building a library, put Cargo.lock in your .gitignore.
If you're building an executable, check Cargo.lock into git.

Once you're ready for release, you can use
	cargo build --release
to compile your files with optimizations turned on

If your project contains unit tests, it can execute them for you by using
	cargo test

Add dependencies
https://crates.io/
https://github.com/toml-lang/toml
Edit Cargo.toml with
[dependencies]
time = "0.1.12"
regex = "0.1.41"

You added the regex library, which provides support for regular expressions.
Now, you can pull in that library using extern crate in main.rs.

Now, if regex gets updated, we will still build with the same revision, until we choose to
	cargo update           # updates all dependencies
	cargo update -p color  # updates just 'color'

Overriding Dependencies
	mkdir ~/.cargo
	vim .cargo/config
paths = ["/path/to/project/conduit"]

https://siciarz.net/24-days-rust-rayon/
parallel code

Hashing
https://ticki.github.io/blog/seahash-explained/

Shared library
	rustc --crate-type=lib structs.rs
	rustc --crate-type=lib --crate-name=mycrate structs.rs
These varialbes could be defined in
#![crate_type = "lib"] 
#![crate_name = "mycrate"]
Posible values for crate_type: bin, lib, rlib, dylib, or staticlib

Embedded Rust
https://rust-embedded.github.io/book/intro/index.html
https://news.ycombinator.com/item?id=19766713

Cross compile
https://hackernoon.com/compiling-rust-for-the-raspberry-pi-49fdcd7df658
https://github.com/japaric/rust-cross
Add the toolchain for Rust:
	rustup target add arm-unknown-linux-gnueabi
	rustup target add armv7-unknown-linux-gnueabihf
	rustup target add armv7-linux-androideabi
	rustup target add aarch64-linux-android
	rustup target add aarch64-unknown-linux-gnu
and the right C compiler:
	sudo apt install gcc-arm-linux-gnueabihf
	sudo apt install gcc-arm-linux-gnueabi
	sudo apt install gcc-aarch64-linux-gnu
Check
	/usr/lib/gcc-cross
We need to add our build target to ~/.cargo/config by adding the following lines, so that rust knows which linker to use.
	vim ~/.cargo/config

[target.arm-unknown-linux-gnueabi]
linker = "arm-linux-gnueabi-gcc"

[target.armv7-unknown-linux-gnueabihf]
linker = "arm-linux-gnueabihf-gcc"

[target.armv7-linux-androideabi]
linker = "gcc-arm-linux-gnueabi-gcc"

[target.aarch64-linux-android]
linker = "aarch64-linux-gnu-gcc"

[target.aarch64-unknown-linux-gnu]
linker = "aarch64-linux-gnu-gcc"

For termux
https://blog.geemili.xyz/blog/rust-app-on-termux-with-nix/
https://www.reddit.com/r/rust/comments/c7ernb/compiling_rust_apps_for_termux_with_nixshell/
[target.armv7-linux-androideabi]
linker = "armv7a-unknown-linux-androideabi-clang"

Print other targets
	rustc --print target-list | pr -tw100 --columns 3

Create a project
	cargo new hello-rpi --bin
Build a project for RPi
	cargo build --target=arm-unknown-linux-gnueabi
	cargo build --target=armv7-unknown-linux-gnueabihf
Build for termux
	cargo build --target=armv7-linux-androideabi
	cargo build --target=aarch64-linux-android
	cargo build --target=aarch64-unknown-linux-gnu
Check the binary out
	file target/armv7-unknown-linux-gnueabihf/debug/hello-rpi
Push it to Android or ssh server
	adb push target/armv7-linux-androideabi/debug/cli /storage/self/primary/our-cli-app
	scp target/armv7-unknown-linux-gnueabihf/debug/hello me@arm:~

Rust analizer
https://rust-analyzer.github.io/blog/2020/04/20/first-release.html
https://news.ycombinator.com/item?id=22995466
