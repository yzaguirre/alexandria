https://github.com/leandromoreira/ffmpeg-libav-tutorial#learn-ffmpeg-libav-the-hard-way
https://www.ffmpeg.org
https://en.wikipedia.org/wiki/FFmpeg
The project comprises several components:
ffmpeg is a command-line tool to convert one video file format to another. It can also grab and encode in real-time from a TV card.
ffserver is an HTTP and RTSP multimedia streaming server for live broadcasts. It can also time shift live broadcast.
ffplay is a simple media player based on SDL and on the FFmpeg libraries.
ffprobe is a command-line tool to show media information.
libswresample is a library containing audio resampling routines.
libavresample is a library containing audio resampling routines from the Libav project, completely different from libswresample from ffmpeg.
libavcodec is a library containing all the FFmpeg audio/video encoders and decoders. Most codecs were developed from scratch to ensure best performance and high code reusability.
libavformat is a library containing demuxers and muxers for audio/video container formats.
libavutil is a helper library containing routines common to different parts of FFmpeg. This library includes Adler-32, CRC, MD5, RIPEMD, SHA-1, SHA-2, LZO decompressor, Base64 encoder/decoder, DES encrypter/decrypter, RC4 encrypter/decrypter and AES encrypter/decrypter.
libpostproc is a library containing video postprocessing routines.
libswscale is a library containing video image scaling and colorspace/pixelformat conversion routines.
libavfilter is the substitute for vhook which allows the video/audio to be modified or examined between the decoder and the encoder.

https://img.ly/blog/ultimate-guide-to-ffmpeg/
https://news.ycombinator.com/item?id=33771445

How to use FFMPEG
https://www.youtube.com/watch?v=MPV7JXTWPWI

FFmpeg Command Visualizer and Editor
https://ffmpeg.guide
https://news.ycombinator.com/item?id=33383023

Install
	apt install ffmpeg
Binary
https://johnvansickle.com/ffmpeg/
	wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
	wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz.md5
	md5sum -c ffmpeg-release-amd64-static.tar.xz.md5
	tar xf ffmpeg-release-amd64-static.tar.xz
	cd ffmpeg-5.1.2-amd64-static
	mv ffmpeg ffprobe qt-faststart /usr/local/bin
	sudo mv manpages/ /usr/local/src
x	cp -r model /usr/local/share/

Custom compilation with FDK AAC encoder and such, see:
https://trac.ffmpeg.org/wiki/CompilationGuide

Compile
	wget https://www.ffmpeg.org/releases/ffmpeg-5.1.2.tar.bz2
	wget https://www.ffmpeg.org/releases/ffmpeg-5.1.2.tar.bz2.asc
x	gpg --recv-keys 0xd67658d8
x	gpg --edit-key 0xd67658d8
	gpg --keyserver keyserver.ubuntu.com --recv-keys 0xFCF986EA15E6E293A5644F10B4322F04D67658D8
	gpg --verify ffmpeg-5.1.2.tar.bz2.asc ffmpeg-5.1.2.tar.bz2
	tar xf ffmpeg-5.1.2.tar.bz2
	cd ffmpeg-5.1.2
	./configure
	make -j 12 # twelve CPU cores
	make install

Very minimal FFmpeg installation:
	sudo apt-get install zlib1g-dev yasm
	git clone --depth 1 git://source.ffmpeg.org/ffmpeg.git
	cd ffmpeg
	./configure --enable-shared --prefix=/usr
	make -j12
	sudo checkinstall --pkgname=FFmpeg --fstrans=no --backup=no \
				--pkgversion="$(date +%Y%m%d)-git" --deldoc=yes
Windows
	choco install ffmpeg
Installing FFmpeg on macOS Big Sur (on Intel)
https://www.youtube.com/watch?v=zl4vo0dhLRk
Download the following: ffmpeg, ffprobe, ffplay
	wget https://evermeet.cx/ffmpeg/ffmpeg-5.1.2.zip
	wget https://evermeet.cx/ffmpeg/ffmpeg-5.1.2.zip.sig
	wget https://evermeet.cx/ffmpeg/ffprobe-5.1.2.zip
	wget https://evermeet.cx/ffmpeg/ffprobe-5.1.2.zip.sig
	wget https://evermeet.cx/ffmpeg/ffplay-5.1.2.zip
	wget https://evermeet.cx/ffmpeg/ffplay-5.1.2.zip.sig
	curl https://evermeet.cx/ffmpeg/0x1A660874.asc | gpg --import
	gpg --verify ffmpeg-5.1.2.zip.sig
	gpg --verify ffprobe-5.1.2.zip.sig
	gpg --verify ffplay-5.1.2.zip.sig
	unzip ffmpeg-5.1.2.zip -d /usr/local/bin
	unzip ffprobe-5.1.2.zip -d /usr/local/bin
	unzip ffplay-5.1.2.zip -d /usr/local/bin
Remove from quarantine
	sudo xattr -dr com.apple.quarantine /usr/local/bin/ff*
Add the /usr/local/bin to PATH
	vim ~/.zshrc
PATH+=/usr/local/bin
	source ~/.zshrc
Homebrew
	brew install ffmpeg

Video information
	ffmpeg -i video.mp4

List codecs
	ffmpeg -codecs

Download HLS
	ffmpeg -i "m3u8URL" -c copy fileName.mp4
Trim video
https://superuser.com/questions/138331/using-ffmpeg-to-cut-up-video#704118
https://stackoverflow.com/questions/19774975/unknown-encoder-libfaac
https://shotstack.io/learn/use-ffmpeg-to-trim-video/
	ffmpeg -i video.mp4 -ss 0 -to 30 fragment.mp4
Trime with frame number
https://superuser.com/a/1365055/1034146
https://stackoverflow.com/questions/47441921/using-a-ffmpeg-trim-filter-to-trim-a-video-while-preserving-its-audio-with-fil
	ffmpeg -i video.mp4 -vf select="between(n\,0\,800),setpts=PTS-STARTPTS" -c:v h264_nvenc -c:a copy out.mp4
	ffmpeg -i video.mp4 -vf trim=60:120 -c:v h264_nvenc -c:a copy out.mp4
Trim to 10 second duration
	ffmpeg -i "input.flv" -ss 00:00:05.240 -t 10 "Path\Do you want him1.flv"
Convert video and trim
	ffmpeg -i "Path\do you want him.flv" -ss 00:00:05.240 -to 00:00:08.360 -vcodec libx264 -acodec aac "Path\Do you want him1.flv"
To webm
	ffmpeg -i input.mkv -c:v vp9 -c:a libvorbis output.webm
Convert only video
	ffmpeg -i input.mkv -c:v vp9 -c:a copy output.webm
Convert only audio
	ffmpeg -i input.mkv -c:v copy -c:a libvorbis output.webm
Convert video and bitrate to 1 megabit
	ffmpeg -i input.mkv -c:v libx264 -c:a libvorbis -b:v 1M output.webm
Reduce framerate
	ffmpeg -i input.mkv -c:v libx264 -c:a libvorbis -r 24 output.webm
Reduce resolution to 480p video
	ffmpeg -i input.mkv -c:v libx264 -c:a libvorbis -s 848x480 output.webm
	ffmpeg -i input.mkv -c:v libx264 -c:a libvorbis -r 24 -b:v 1M -s 848x480 output.webm

https://sandilands.info/sgordon/multimedia-on-linux-command-line

Concat
https://stackoverflow.com/questions/7333232/concatenate-two-mp4-files-using-ffmpeg
https://trac.ffmpeg.org/wiki/Concatenate
mylist.txt
# this is a comment
file '/path/to/file1'
file '/path/to/file2'
file '/path/to/file3'

	ffmpeg -f concat -i mylist.txt -c copy output.mp4
	ffmpeg -i vid1.avi -i vid2.avi -filter_complex "[0][1]concat=n=2" out.avi

https://superuser.com/questions/704493/ffmpeg-convert-m4a-files-to-mp3-without-significant-loss-of-information-
	mkdir newfiles
	for f in *.m4a; do ffmpeg -i "$f" -codec:v copy -codec:a libmp3lame -q:a 2 newfiles/"${f%.m4a}.mp3"; done

Convert video to gif
https://superuser.com/a/556031
Generate a palette:
	ffmpeg -y -ss 30 -t 3 -i input.flv -vf fps=10,scale=320:-1:flags=lanczos,palettegen palette.png

Output the GIF using the palette:
	ffmpeg -ss 30 -t 3 -i input.flv -i palette.png -filter_complex "fps=10,scale=320:-1:flags=lanczos[x];[x][1:v]paletteuse" output.gif

https://www.rickmakes.com/ffmpeg-notes/
https://www.youtube.com/playlist?list=PLErU2HjQZ_ZOPDZ71Khzt5PX4X4j6flkg
Stream a Mac Screen to a Raspberry Pi
This lists audio/video sources on the Mac:
	ffmpeg -f avfoundation -list_devices true -i ""
Run this on the Mac:
	ffmpeg -f avfoundation -i "1" -vcodec h264_videotoolbox -realtime 1 -pix_fmt nv12 -b:v 5000k -f mpegts udp://ip_address_of_pi:1234
Run this on the Raspberry Pi:
	omxplayer --timeout 60 ip_address_of_mac:1234
Piping Output of FFmpeg to Input of FFplay (Watch streaming)
https://www.youtube.com/watch?v=eptS90MP6ro
	ffmpeg -i <stream or file> -f h264 -vcodec libx264 pipe:1 | ffplay -i pipe:0

Make H.265 File Compatible with Quicktime
	ffmpeg -i input.mp4 -codec copy -tag:v hvc1 output.mp4
Add Background Image to an Audio File
	ffmpeg -loop 1 -f image2 -i airplane.jpg -i train_whistle_audio.aac \
	-vf crop=in_w:in_w*9/16,scale=1920:1080,fps=fps=30 \
	-pix_fmt yuv420p -vcodec libx264 -shortest train_whistle_airplane.mp4
Add Solid Color Background to an Audio File
	ffmpeg -i train_whistle_audio.m4a -f lavfi -i color=c=blue:s=640x480:r=15 -acodec copy -shortest train_whistle_blue_background.mp4
Extract Audio/Remove Video from a Video File
	ffmpeg -i train_whistle.mp4 -vn -acodec copy train_whistle_audio.m4a
Extract Video/Remove Audio from a Video File
	ffmpeg -i train_whistle.mp4 -vcodec copy -an train_whistle_no_audio.mp4
Add Silent Audio Track to a Video File
	ffmpeg -i video_without_audio.mp4 -f lavfi -i anullsrc -vcodec copy -acodec aac -shortest video_with_silence.mp4
Add audio to a video. Add first and second input to first slot.
	ffmpeg -i input.mkv -i audio.m4a -map 0:v:0 -map 1:a:0 -c:v copy output.mp4
To the previos copy with lower volume
	ffmpeg -i input.mkv -i audio.m4a -map 0:v:0 -map 1:a:0 -c:v copy -filter:a "volume=0.5" output.mp4
Double the audio volume
	ffmpeg -i input.mkv -filter:a "volume=2.0" output.mkv
Crop a video from the top left corner
	ffmpeg -i input.mkv -filter:v "crop=1280:720:0:0" output.mkv
Crop to 16:9 ratio
	ffmpeg -i input.mp4 -vf crop=16/9*ih:ih output.mp4
Crop and scale
	ffmpeg -i input.mp4 -vf "crop=in_w:in_w*9/16,scale=1920:1080,fps=fps=30" output.mp4
Pad to 16:9 ratio
	ffmpeg -i input.mp4 -vf "pad=iw:iw/16*9:(ow-iw)/2:(oh-ih)/2" output.mp4
https://stackoverflow.com/questions/40088222/ffmpeg-convert-video-to-images
Extract Single JPEG Image from MKV (with MJPEG encoding)
	ffmpeg -i out.mkv -ss 00:00:00.03 -vframes 1 -codec copy output.jpg
Convert JPEG Image Sequence to MKV (with MJPEG encoding)
	ffmpeg -framerate 30 -pattern_type glob -i 'timelapse/*.JPG' -codec copy out.mkv
Convert MKV (with MJPEG encoding) to JPEG Image Sequence
	ffmpeg -i out.mkv -vcodec copy timelapse/pic%d.jpg
Create a thumbnail image every X seconds of the video
https://web.archive.org/web/20210621172103/https://trac.ffmpeg.org/wiki/Create%20a%20thumbnail%20image%20every%20X%20seconds%20of%20the%20video
Output one image every second:
	ffmpeg -i input.mp4 -vf fps=1 out%d.png
Output one image every minute:
	ffmpeg -i test.mp4 -vf fps=1/60 thumb%04d.png
Output one image every 10 minutes:
	ffmpeg -i test.mp4 -vf fps=1/600 thumb%04d.png

https://github.com/georgmartius/vid.stab
http://public.hronopik.de/vid.stab/
https://twitter.com/Wikinaut/status/1445321884132913159
How to deshake a video with vidstab
pass1
	ffmpeg -i input.mp4 -vf vidstabdetect -f null -
pass2
	ffmpeg -i input.mp4 -vf vidstabtransform=crop=black:smoothing=20,unsharp=5:5:0.8:3:3:0.4 output.mp4

Rotate video
https://shotstack.io/learn/rotate-videos-using-ffmpeg/
	exiftool -Rotation -ImageWidth -ImageHeight h1920_w1080_f30_a9-16_r90.mp4
Fix rotation to 0
	ffmpeg -i h1920_w1080_f30_a9-16_r90.mp4 -c copy -metadata:s:v:0 rotate=0 temp.mp4
Rotate 90 clockwise
	ffmpeg -i in.mov -vf "transpose=1" out.mov
Rotate counter clockwise
	ffmpeg -i temp.mp4 -vf "transpose=cclock" -crf 23 -c:a copy rotated.mp4
Add watermark
	ffmpeg -i input.mkv -i watermark.png -filter_complex "overlay=50:50" output.mkv
Overlay small video over another
	ffmpeg -i input.mkv -i input2.mkv -filter_complex "[0:v][1:v] overlay=25:25" output.mkv

Chroma key
Replace green background
https://stackoverflow.com/questions/8299252/ffmpeg-chroma-key-greenscreen-filter-for-images-video/32291842#32291842
https://ffmpeg.org/ffmpeg-filters.html#colorkey
Where <color> is the rgb color to match in hex (ex: 0x000000 for black),
<similarity> is a tolerance on the color-match (ex: 0.3),
and <blend> (ex: 0.2) controls whether the opacity is on-off
or how gradual it is. (See the documentation for more).
	ffmpeg -i <base-video> -i <overlay-video> -filter_complex '[1:v]colorkey=0x<color>:<similarity>:<blend>[ckout];[0:v][ckout]overlay[out]' -map '[out]' <output-file>
	ffmpeg -i <base-video> -i <overlay-video> -filter_complex '[1:v]colorkey=0x<color>:<similarity>:<blend>[ckout];[0:v][ckout]overlay[despill];[despill]despill=green[colorspace];[colorspace]format=yuv420p[out]' -map '[out]' <output-file>
Making Transparent Video with FFMPEG by Chroma Keying | Tutorial
https://www.youtube.com/watch?v=0tA4fauFykw
Using mov as it supports transparency
	ffmpeg -f lavfi -i "color=c=#00000000:s=606x1080" -i .\input.mp4 -c:png -filter_complex "[1:v]chromakey=0x00FF00:similarity=.455[out]" -map "[out]" .\output.mov
Replace green with transparent background.
VP9 allows transparency. Tolerence at 0.1 if green is not exactly green. Blend value of 0.2.
	ffmpeg -i follow_alert.mp4 -c:v vp9 -filter:v "chromakey=0x00FF00:0.1:0.2" follow_alert.webm

https://stackoverflow.com/questions/8299252/ffmpeg-chroma-key-greenscreen-filter-for-images-video/65610927#65610927
Resize the background image. Ej. 1024x1024, 1920x1080, etc.
	convert background-original.jpg -resize 1024x1024! background.jpg
Conversion
	ffmpeg -i background.jpg -i opengl-rotating-triangle.mp4 -filter_complex '[1:v]colorkey=0x000000:0.1:[ckout];[0:v][ckout]overlay[out]' -map '[out]' out.mp4
or
https://gist.github.com/kerbeh/fbe0cd0d89c424708c119e0a0d00ca88
For mac
	ffmpeg -hwaccel videotoolbox -i background.jpg -i out.mp4 -filter_complex "[1:v]colorkey=0x34d454:0.3:0.15[ckout];[0:v][ckout]overlay[despill];[despill] despill=green[colorspace];[colorspace]format=yuv420p[out]" -map "[out]" output.mp4

ffmpeg buddy
https://evanhahn.github.io/ffmpeg-buddy/
https://news.ycombinator.com/item?id=31557809

How to Optimize Videos for the Web with FFmpeg
https://www.youtube.com/watch?v=G1_7LnbJdR0
https://caniuse.com/?search=h264
https://pixelpoint.io/blog/web-optimized-video-ffmpeg/
https://trac.ffmpeg.org/wiki/Encode/VP9
https://trac.ffmpeg.org/wiki/Encode/H.264
https://trac.ffmpeg.org/wiki/Encode/H.265
https://gist.github.com/ericmurphyxyz/b00a73142618a65cc70a54f2ae4d7fad
	optvideo skyscrapers.mp4 1920 videos
Scale a video
https://unix.stackexchange.com/questions/28803/how-can-i-reduce-a-videos-size-with-ffmpeg
	ffmpeg -i input.mkv -vf "scale=iw/2:ih/2" half_the_frame_size.mkv
	ffmpeg -i input.mkv -vf "scale=iw/3:ih/3" a_third_the_frame_size.mkv
	ffmpeg -i input.mkv -vf "scale=iw/4:ih/4" a_fourth_the_frame_size.mkv
	ffmpeg -i input.mp4 -vf scale=1920:1080 output.mp4
Scale down and remove audio
	ffmpeg -i skyscrapers.mp4 -vf scale=1920:-2 -an output.mp4
	ffmpeg -i skyscrapers.mp4 -c:v libx264 -crf 24 -vf scale="1920:-2" -movflags faststart -an output.mp4
	ffmpeg -i skyscrapers.mp4 -c:v libvpx-vp9 -crf 40 -vf scale="1920:-2" -movflags faststart -an output.webm
	ffmpeg -i skyscrapers.mp4 -c:v libx265 -crf 28 -vf scale="1920:-2" -tag:v hvc1 -movflags faststart -an output.mp4
HTML
<video width="100%" controls>
	<source src="videos/skyscrapers_h265.mp4" type="video/mp4; codecs=hevc" />
	<source src="videos/skyscrapers.webm" type="video/webm; codecs=vp9" />
	<source src="videos/skyscrapers_h264.mp4" type="video/mp4" />
</video>

FFmpeg Crash Course | Install, Convert, Reduce File Size, Trim, Crop, Watermark, Chroma Key, Overlay
https://www.youtube.com/watch?v=yieG9DZQ_vM

Hardware
FFmpeg Hardware Encoding on a Windows 10
https://www.youtube.com/watch?v=H81fgnaXkHY
https://www.rickmakes.com/ffmpeg-hardware-encoding-on-a-windows-10/
https://en.wikipedia.org/wiki/Intel_Quick_Sync_Video
https://www.intel.com/content/www/us/en/products/sku/213803/intel-core-i711800h-processor-24m-cache-up-to-4-60-ghz/specifications.html
	ffmpeg -encoders | rg 264
	ffmpeg -encoders | rg qsv
	ffmpeg -encoders | rg amf
	ffmpeg -encoders | rg nvenc

FFProbe
	ffprobe -show_streams -print_format json input.mp4
001 Inspecting with ffprobe
https://www.youtube.com/watch?v=7iDwaT7l6SM
FFProbe and Parsing Json with JQ - Bash Playground
https://www.youtube.com/watch?v=P4cc6beZjVs
	ffprobe -v error -select_streams v -show_entries stream=codec_name -print_format default=noprint_wrappers=1:nokey=1 input.mp4
	ffprobe -v error -show_streams -print_format csv .\input.mp4

FFPlay
#12. ffplay | FFmpeg
https://www.youtube.com/watch?v=0CqBRUirGOA
Play scaled
	ffplay Moon.mp4 -vf scale=700:-1
Stabalize play
	ffplay Moon.mp4 -vf "transpose=2,deshake=edge=0"

Huy Nguyen
https://www.youtube.com/channel/UCgmcl72rZ-S7Jwo4PGzGsnw/search?query=ffmpeg

Slideshow
https://shotstack.io/learn/use-ffmpeg-to-convert-images-to-video/
https://superuser.com/questions/1189246/creating-an-ffmpeg-image-slideshow-with-zoompan-and-fade-in-out/1190199#1190199
Chroma subsampling scheme and the p stands for planar, not progressive. In ffmpeg yuv420p is called a pixel format.
	ffmpeg -h encoder=h264_nvenc

Effects
	ffmpeg -i input.avi -vf "..." output.avi
-vf
	-vf "filter1=settign1=value1:setting=value2,filter2=setting1=value1:setting2=value2"
Video editing filters
Sharpening
Makes a blurry video clearer
	ffmpeg -i input.avi -vf "unsharp" output.avi
	ffmpeg -i input.avi -vf "unsharp=lx=3:ly=3" output.avi
	ffmpeg -i input.avi -vf "unsharp=lx=7:ly=7" output.avi
	ffmpeg -i input.avi -vf "unsharp=lx=13:ly=13" output.avi
	ffmpeg -i input.avi -vf "unsharp=lx=7:ly=7:la=1.0" output.avi
	ffmpeg -i input.avi -vf "unsharp=lx=7:ly=7:la=1.5" output.avi
	ffmpeg -i input.avi -vf "unsharp=lx=7:ly=7:la=-1.5" output.avi
Equalization
	ffmpeg -i input.avi -vf "eq=contrast=0.7" output.avi
	ffmpeg -i input.avi -vf "eq=contrast=1.0" output.avi
	ffmpeg -i input.avi -vf "eq=contrast=1.3" output.avi
	ffmpeg -i input.avi -vf "eq=brightness=-0.3" output.avi
	ffmpeg -i input.avi -vf "eq=brightness=0.0" output.avi
	ffmpeg -i input.avi -vf "eq=brightness=-0.3" output.avi
	ffmpeg -i input.avi -vf "eq=saturation=0.5" output.avi
	ffmpeg -i input.avi -vf "eq=saturation=1.0" output.avi
	ffmpeg -i input.avi -vf "eq=saturation=1.5" output.avi
	ffmpeg -i input.avi -vf "eq=gamma_r=0.5" output.avi
	ffmpeg -i input.avi -vf "eq=gamma_r=1.0" output.avi
	ffmpeg -i input.avi -vf "eq=gamma_r=1.5" output.avi
Colorbalance
	ffmpeg -i input.avi -vf "eq=colorbalance=rs=-0.3:bs=0.3:rh=0.1:bh=-0.1" output.avi
Audio visualization
	ffmpeg -i input.mp3 -filter_complex "..." output.avi
Showwaves
	ffmpeg -i input.mp3 -filter_complex "showwaves=mode=line:colors=#00FF00|#FF00FF" output.avi
	ffmpeg -i input.mp3 -filter_complex "showfreqs=colors=#00FF00|#FF00FF" output.avi
	ffmpeg -i input.mp3 -filter_complex "showfreqs=size=1280x720" output.avi
	ffmpeg -i input.mp3 -filter_complex "showfreqs=size=1920x1080" output.avi
	ffmpeg -i input.mp3 -filter_complex "showwaves=mode=cline:size=1280x720" output.avi
	ffmpeg -i input.mp3 -filter_complex "showwaves=mode=cline:size=1920x1080" output.avi
Avectorscope
	ffmpeg -i input.mp3 -filter_complex "avectorscope=rc=200:gc=20:bc=100" output.avi
	ffmpeg -i input.mp3 -filter_complex "avectorscope=rc=40:gc=160:bc=80" output.avi
	ffmpeg -i input.mp3 -filter_complex "avectorscope=rc=40:gc=80:bc=160" output.avi
	ffmpeg -i input.mp3 -filter_complex "avectorscope=rc=40:gc=80:bc=160:rf=3:gf=20:bf=15" output.avi
	ffmpeg -i input.mp3 -filter_complex "avectorscope=rc=40:gc=80:bc=160:draw=line" output.avi
Video visualizations
vectorscope
	ffmpeg -i sample_vid.mov -vf "format=yuva444p9, vectorscope" out.avi
	ffmpeg -i sample_vid.mov -vf "format=yuva444p9, vectorscope=mode=color" out.avi
	ffmpeg -i sample_vid.mov -vf "format=yuva444p9, vectorscope=mode=color4" out.avi
	ffmpeg -i sample_vid.mov -vf "format=yuva444p9, vectorscope=mode=color4:g=green" out.avi
Blur a video
FFmpeg command to Blur Video on particular location
https://www.youtube.com/watch?v=qTZ-VvO8XFU
	ffmpeg -i .\VID-20221115-WA0001.mp4 -filter_complex "[0:V]crop=134:640,boxblur=20[fg];[0:V] [fg]overlay=(main_w - 134):0" -c:v nvenc_h264 -y output.mp4
FFMPEG Advanced Techniques Pt1 - Advanced Filters
https://www.youtube.com/watch?v=M58rc7cxl_s
FFMPEG Advanced Techniques Pt2 - Filtergraphs & Timeline
https://www.youtube.com/watch?v=hElDsyuAQDA

Lossless-cut
https://github.com/mifi/lossless-cut
	wget https://github.com/mifi/lossless-cut/releases/download/v3.47.1/LosslessCut-linux-x64.tar.bz2
	tar xf LosslessCut-linux-x64.tar.bz2 -C /opt
Add to PATH environment variable
/opt/LosslessCut-linux-x64
Windows
	wget https://github.com/mifi/lossless-cut/releases/download/v3.47.1/LosslessCut-win-x64.7z
	7z x -o"C:\ProgramData\LosslessCut" LosslessCut-win-x64.7z
Configuration at
/home/david/.config/LosslessCut
C:\Users\DAVIDY~1\AppData\Roaming\LosslessCut
