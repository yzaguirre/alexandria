http://www.privoxy.org/
http://proxy-list.org/
http://www.checkedproxylists.com/
http://proxy-list.org/english/index.php?pp=any&pt=any&pc=Mexico&ps=any#proxylist

http://www.redpill-linpro.com/sysadvent//2015/12/13/socks-proxy-as-poor-mans-vpn.html
https://news.ycombinator.com/item?id=10726158
http://blog.sensible.io/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html
http://kev.inburke.com/kevin/how-to-use-ec2-as-a-web-proxy/
    # ssh ec2 -D 2001
Configure firefox to use SOCKS host: localhost, Port: 2001
Make alias
	$ echo $'\nalias proxyec2=\'ssh ec2proxy\'\n' >> ~/.bash_aliases

Other way, with tinyproxy
http://blog.i-evaluation.com/2013/09/21/tunnelling-using-ec2-as-web-proxy-complete-guide/
http://frankhq.io/blog/2012/11/14/how-to-setup-a-private-proxy-server-on-ec2-in-under-10-minutes/

explain
https://en.wikipedia.org/wiki/Reverse_proxy
https://stackoverflow.com/questions/224664/difference-between-proxy-server-and-reverse-proxy-server
http://expedienttech.net/?p=68

channel 3: open failed: administratively prohibited: open failed
http://linuxindetails.wordpress.com/2010/02/18/channel-3-open-failed-administratively-prohibited-open-failed/
check /var/log/auth.log and add cb64 crunchbag and any other to /etc/hosts

http://supporthandbook.wordpress.com/2011/01/10/using-squid-hosted-on-ec2-to-bypass-corporate-proxy/
http://hackingonstuff.net/post/23929749838/setting-up-a-squid-proxy-on-aws
sudo nano /etc/squid3/squid.conf
acl all src all
acl SSL_ports port 443
acl CONNECT method CONNECT
http_access allow all
http_port 3128
hierarchy_stoplist cgi-bin ?
coredump_dir /var/spool/squid3
	sudo service squid3 restart
	grep -Ev "(^#|^$)" /etc/squid/squid.conf > /etc/squid/squid.edit
Free proxy
https://blog.haschek.at/post/fd9bc

https://mitmproxy.org/doc/howmitmproxy.html
https://github.com/mitmproxy/mitmproxy
	apt install python-pip python-dev libffi-dev libssl-dev libxml2-dev libxslt1-dev libjpeg8-dev zlib1g-dev
	pip install mitmproxy
http://docs.mitmproxy.org/en/latest/transparent/linux.html
	sudo sysctl -w net.ipv4.ip_forward=1
	echo 0 | sudo tee /proc/sys/net/ipv4/conf/*/send_redirects
	sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
	sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080
	mitmproxy -T --host
https://dadario.com.br/mitming-ssl-tls-connections/
	mitmdump
	curl -x http://127.0.0.1:8080 http://some-http-site.com 
As we're using the same machine, we have to make our operating system trust the CA cert from mitmproxy. 
# run mimtproxy once to generate the file below (mitmproxy-ca-cert.cer) and exit
	mitmproxy
# add cert to trusted certs on your O.S.
	cp ~/.mitmproxy/mitmproxy-ca-cert.cer /usr/local/share/ca-certificates/mitmproxy-ca-cert.crt
	/usr/sbin/update-ca-certificates
And it's done. Now we can try HTTPS websites:
	curl -x https://127.0.0.1:8080 https://dadario.com.br
Ok, but how to manipulate requests?
We can use just run mitmdump passing a script file
	mitmdump -s add_headers.py
The content of add_headers.py is this:

def request(context, flow):
    flow.request.headers["newheader"] = ["foo"]

Use own certs
Concat the private + public + intermediate + dh
	mitmproxy -T --host --client-certs DIRECTORY
http://darkk.net.ru/redsocks/
http://proxychains.sourceforge.net/howto.html

Chromium proxy
	chromium --proxy-server="socks5://foobar:66"
